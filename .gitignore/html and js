<!DOCTYPE html>
<html lang="en">
<head>

	<meta charset="UTF-8">
	<title>Document</title>
	<link rel="stylesheet" href="simple.css">
</head>



	<!--<div id="gibberishH">
<p id = "firstparagraph"> L o r e m ipsum d o lo r s i t amet,
c o n s e c t e t u r a d ip is c in g e l i t . V e s tib u lu m
m o le s t ie p u lv in a r a n te , a v o lu t p a t e s t
s o d a le s e t . Ut g r a v id a ju s t o ac le o euism od,
e t tempus magna p o s u e re . Cum s o c i i s natoq ue
p e n a tib u s e t m agnis d is p a r t u r ie n t m ontes,
n a s c e t u r r i d i c u l u s mus. I n t e g e r non mi i a c u l i s ,
f a c i l i s i s r is u s e t , v e s t ib u lu m lo re m . Sed quam
ex, p la c e r a t nec t r i s t i q u e id , m a t t is f r i n g i l l a
l i g u l a . M aecenas a p r e tiu m j u s t o . S u s p e n d is s e
s i t amet n ib h c o n s e c t e t u r , t r i s t i q u e t e l l u s
q u is , congue a rc u . E tia m p e lle n t e s q u e d ic tu m
e l i t e g e t sem per. P h a s e llu s o r c i neque, sem per
ac t o r t o r ac, la o r e e t u l t r i c i e s enim .</p>
</div>
<button onclick = "removeFirstParagraph( ) ;"> Это
тарабарщина!</button>-->
	<!--<h1>Некоторые типы мячей</h1>
<ul id = "ballList">
</ul>-->
	<!--<div class="columns">
		<script>
			//for (let prop in navigator) {
				//document.write(prop + " : " + navigator[prop] + //"</br>");
			//}
		</script>
	</div>-->
	<!--<div id="text">
		<p>
			Some text
		</p>
	</div>-->
		<!--/*
		let a = ['2', '4', '6', '8'];
		alert(a);
		alert(a[0] * a[1]);
		alert(a[1] * a[2]); 
		alert(a[2] ** a[3]);*/
		//ищем кинетическую энергию
		//document.write('Ищем кинетическую энергию тела массы м и скорости v');
		//let m = prompt('Введите массу тела d кг', '');
		//let v = prompt('Введите скорость движения тела в км/ч');

		//let f = (m * (v ** 2))/2;

		//document.write('<p> Кинетическая энергия тела, указанного вами равна ' + ' ' + f + ' Дж' + '</p>');
		//let person = {};
		//person.age = 22;
		//person.heir = 'red';
		//person.eye = 'blue';
		//alert(person.age);
		//let myChair = {
			//"cushionMaterial" : "",//1 
			//"numberOfLegs" : "",//2
			//"legHeight" : "",//3
		//};
		 //function configChair () {
		 	//let userValue;

		 	//for (let property in myChair) {
		 	//	if (myChair.hasOwnProperty(property)) {
		 		//	userValue = prompt("Enter mean " + property);
		 		//	myChair[property] = userValue;
		 		//}
		 	//}
		// }

		 //function writeChaireRecepiet () {
		 //	document.write("<h2> Object chair will be have next configuration: </h2>");
		 //	for (let property in myChair) {
		 	//	if (myChair.hasOwnProperty(property)){
		 	//		document.write(property + " : " + myChair[property] + '</br>');
		 	//	}
		 //	}
		// }
		// configChair();
		// writeChaireRecepiet();
		//let sandwich = {
			//ингридиенты сэндвича
			//meat: "",
			//chese: "",
			//bread: "",
			//condiment: "",
			//makeSendwich: function (meat, chese, bread, condiment) {
				// функция приготовления ингридиентов
				//sandwich.meat = meat;
				//sandwich.chese = chese;
				//sandwich.bread = bread;
				//sandwich.condiment = condiment;
				//let mySandwich = sandwich.bread + "," + sandwich.meat + "," + sandwich.chese + "," + sandwich.condiment;
				//return mySandwich;
			//}
		//}
		//let sandwichOrder = sandwich.makeSendwich("ham", "chedder", "wheat", "spicy mustard");
		//document.write(sandwichOrder);//переменная заказа
		//function Person() {
			//this.eyes = "blue",
			//this.le = 2,
			//this.head = 1,
			//this.heir = "red",
			//this.hend = 2,
			//this.clow = "white"
		//}
		//let williNelsen = new Person();
		//alert(williNelsen.leg);
/*

		//создаем функцию-обьуктб где перечисляем все свойства
		function Person () {
			this.eyes = 2;
			this.tith = 1;
			this.heir = "red";
			this.leg = 2;
			this.handls = 2;
			this. head = 1;
			this.ass = 1;
			this.hear = 2;
		}

		//создаем новые обьекты
		let monicaBel = new Person();
		let arnyShwar = new Person();
		let jonyD = new Person();

		//добавляем новые свойства

		Person.prototype.knees = 2;
		Person.prototype.toes = 10;
		Person.prototype.elbows = 2;

		//проверим наличие новых свойств у нашего нового обьекта
		//document.write(jonyD.toes);
		//document.write(monicaBel.knees);
		document.write(arnyShwar.elbows);

		*/
/*

//создаем объекты с помощью команды create
let Person = {
	eyes: 2,
	legs: 2,
	feet: 2
};
//создаем объект на основе Person
let williNelsen = Object.create(Person);
//проверим наличие нового объекта
document.write(williNelsen.legs);
*/



//проверяем, есть ли в браузере поддержка audio
//создаем элемент audio
//let audioTry = document.createElement('audio');
//если он присутствует выведем истину нет выведем ложь
//if (audioTry.play) {
	//console.log('yes');
//}else{
	//console.log('non');
//}





//мы попробуем загрузить что-то с другого сайта на наш сайт
//используя некоторые методы функции окна
//function loadNewPage (url) {
	//window.location = url;
//}

//создаем новую переменную которая будет ссылаться 
// на новый адрес
//let newURL = prompt("Enter new Url.");
//loadNewPage(newURL);





//попробуем определить ширину окна браузера воспользовавшись js
//для этого используем функцию окна браузера
//let currentWidth = window.innerWidth;
 //if(currentWidth == 480) {
 	//console.log("your window is small");
 //} else if(currentWidth < 720 && currentWidth > 480) {
 //	console.log("your window is middle");
 //}else if(currentWidth < 1200 && currentWidth > 720) {
 //	console.log("your window is big")
// }






//создаем кнопку назад и кнопку история в нашем окне браузера
//function takeMeBack () {
	//window.location(window.history.go(-1));
//}
//дальше создаем функцию позволяющую ковырять историю
//function getHistoryLength () {
	//let leng = window.history.length;
	//return leng;
//}

//создаем функцию просмотра истории
//let historyLength = getHistoryLength();
//document.write("<p> Welcome! Колличество посещенных в данном окне вами страниц: " + historyLength + "." + "</p>");


//открывает новое окно
//window.open();

//выводим содержимое окна
//window.print();

//декщдирование строки
//window.atob();


//дeлаем текущее окно неактивным
//window.blur();

//отмуняем выполнение кода заданного через интервал
//window.clearInterval();

//отменяем выполнение кода заданного timeout
//window.clearTimeout();

//закрываем текущее окно
//window.close();
//кстати, сценарии не могут закрывать окна открытые другимим сценариями

//открываем окно confirm
//window.confirm();

//создаем всплывающее оконце	
//window.Popup();
//часто браузеры их блокируют

//делаем текущее окно активным
//window.focus();


//перемещаем окно на заданную величину
//window.moveBy(450, 450);


//перемещаем окно в заданную позицию	
//window.moveTo(300, 300);


//открываем новое окно
//window.open();


//печатаем содержимое страницы
//window.print();

//изменяем размеры окна на заданное колличество пикселей
//window.resize(120);

//window.stop();


//let myNodeList = document.body.childNodes[1].childNodes;
//выведем список всех дочерних елементов в документе на странице

//for (let i = 0; i < myNodeList.length; i++) {
	//document.write(myNodeList[i] + "</br>");
//}



//обход всего дерева с помощью js
//function boldFirstAndLastNav () {
	//document.body.childNodes[1].firstChild.style.fontWeight = "bold";
	//document.body.childNodes[1].lastChild.style.fontWeight = "bold";
//}
//для правильного выбора и стилизации элементов
// все пробелы внутри nav должны быть удалены





//ПОЛНЫЙ ПЕРЕЧЕНЬ И ПРИМЕНЕНИЕ ВСЕХ СВОЙСТВ ДОКУМЕНТА

//document.anchors() получаем якоря ссылок

//document.applets() получаем весь список апплетов

//document.baseURL() получаем базовый URL

//document.body() получаем значение узла body

//document.cookie() получаем или отправляем куки

//document.doctype() получаем тип документа

//document.Element() получает корневой елемент

//document.documentMode() получаем режим визуализации используемый брауезром

//document.documentURL()получаем или устанавливаем расположение документа

//document.domain()получаем доменное имя сервера загрузившего документ

//document.embeds()получаем список 	embed в документе

//document.forms()получает коллекцию всех элементов forms

//document.head()получает знгачение head

//document.images() получает список всех images

//document.implamentation()получает список дом импликаций обрабатывающих документ

//document.lastModified()получает дату и время последнего изменения документа


//document.links()получает коллекцию всех элементов a. area. href

//document.readyState() получает состояние загрузки

//document.refferer()получает адрес с которым был связан документ

//document.scripts() получает список всех скриптов на странице

//document.title()получает или устанавливает заголовок

//document.URL()получает полный URL адрес

//document.addEventListener() назначает обработчика событий

//document.adoptNode()заимствует узел из внешнего документа

//document.close()закрывает для записи документ

//document.createAttribute() создает узел атрибута

//document.createComment()создает узел комментария

//document.createDocumentFragment()создает пустой фрагмент документа указанного размера

//document.createElement()сщздает узел элемента

//document.createTextNode()создает узел текста

//document.getElementById()получает елемент по заданному шдентификатору

//document.getElementsByClassName()получает все элементы документа по классу

//document.getElemtntsByName()получет все узлы по именам


//document.getElementsByTagName()получает все по именам тегов

//document.importNode() копирует содержимое из внешнего документа

//document.normalize()удаляет пустые узлы и сближает смежные

//document.open()открываем документ для записи

//document.querySelector() получает перввый селектор в документе совпадающий с указанным

//document.querySelectorAll()получает все селектора подобрные указанным селекторам

//document.removeEventListener()удаляет обработчика событий

//document.renameNode()переименовывает существующий узел

//document.write()записывает код или разметку в документ

//document.writeIn()добавляет код или разметку каждый раз с новой с троки	






//innerHTML содержит все, что заключено между начальным и конечным тегами некоторого едеиента DOM


//document.body.firstChild.innerHTML.setAttribute("class", "myclass");
//первый дочерний элемент получит класс








//пример нескольких переменных ссыдлающихся на один и тот же объект

//установка на пустой объект
//let obj = new Object();

//создаем переменную ссылающуюся на нашу первую переменную	
//let objRef = obj;

//модернизируем первую переменную то есть ссылку
//obj.oneProperty = true;
//данное измененение предстьавлено в обоих переменных, ведь они ссылаються на одно и тоже место

//alert(obj.oneProperty === objRef.oneProperty);//true





//пример живого самомодифицируещегося массива

//создаем массив
//let items = new Array ("one", "two", "three");

//создаем ссылку на объект-массив
//let itemsRef = items;

//добавляем елемент к исходному массиву
//items.push("throu");

//по идее длина массива должна быть одинаковой при вызове из разных ссылок
//alert(items.length === itemsRef.length);//true


//теперь посмотрим на поведение списка при немного других обстоятельствах
//let items = new Array ("one", "two", "three");

//let itemsRef = items;

//теперь установим нашу пеменную на новый массив
//items = new Array ("new", "array");

//теперь переменные указывают на разные объекты
//alert(items != itemsRef)//true

//теперь рассматриваем уникальный случай самоиндетификации массива

//установим переменную на строковое значение
//let items = "test";

//let itemsRef = items;

//items += "ing";

// был создан абвослютно новый строковый объект. так что переменные не равны друг другу
//alert(items != itemsRef)//true










//решение квадратного уравнения

//let a = prompt('enter number a');
//let b = prompt('enter number b');
//let c = prompt('enter number c');
//let d = b**2 - 4*a*c;
//let x1 = (-b + d**0.5)/2*a;
//let x2 = (-b - d**0.5)/2*a;
//document.write("<p> x1 = " + x1 + "</p>");
//document.write("<p> x2 = " + x2 + "</p>");








//береб один из елементов и удаляем его
// в данном случае елемент h1

 //function getTagNames (tagName) {
 	//let getTags = document.getElemtntsByTagName(tagName);
 	//for (let i = 0; i < getTags.length; i++) {
 		//getTags[i].innerHTML = i + 1;
 	//};
 //}
 //getTagNames("h1");





//создаем ункцию которая будет брать елемент по его классу и 
// изменять

//function checkMath(result) {
	//let userMath = document.getElementById("answerl").value;
	//let errors = document.getElemtntsByClassName("error");
	//if(parseInt(userMath) != parseInt(result)) {
		//errors[0].innerHTML = "Wrong! You entered" + userMath + "Rith answer " + result;
	//}else {
		//errors[0].innerHTML = "Correct!";
	//}

//}





//let typeOffBall = ["bascet", "base", "hand", "polo", "socer", "foot"];
//создали массив с именами типов мячей
//создаем цикл и выводим с его помощью все виды мячей
//for (let i = 0; i < typeOffBall.length; i++) {
	//let listElement = document.createElement("li");
	//listElement.innerHTML = typeOffBall[i];
	//document.getElementById("ballList").appendChild(listElement);
//}






//создаем функцию удаляющую один елемент dom
//function removeFirstParagraph () {
	//let firstPara = document.getElementById("firstparagraph");
	//firstPara.parentNode.removeChild(firstPara);
//}



//по сути написание простейшего калькулятора довольно увлекательный
// процесс и пишется интересно и лекгкло
//let a = prompt("введите какое-гнибудь чтисло");
//let b = prompt("введите какое нибудь число");


//let d = parseInt(a) + parseInt(b);
//let f = parseInt(a) * parseInt(b) ;

//alert(d);
//alert(f);






//function createPara () {
	//let text = prompt("введите какойнибудь текст");


	//document.write("<p>" + text + "</p>");
//}
//createPara();



//подключение событий к dom
//ждем окончание загрузки окна и только после этого грузим обработчик
//window.onload = initializer;
//создаем глобальную переменную для счетчика
//let count = 0;
/**
регистрируем событие jnclick
*/
//function initializer () {
	//document.getElementById("incrementButtonn").onclick = increaseCount;
	/** 
	инкрементирует переменную и отображает результат
	*/
	//function increaseCount () {
		//count++;
		//document.getElementById("currentCount").innerHTML = count;
	//}


//}






//в следующем коде используется такой обработчик как addEventListene
//window.addEventListener('load', registerEvents, false);
//также создаем глобальную переменную для счетчика
//let count = 0;
/**
слудующая функция регистрирует событие 
*/
//function registerEvents (e) {
	//document.getElementById("incrementButtonn").addEventListener('click', increaseCount, false);
	//document.getElementById("incrementButtonn").addEventListener('click', changeSize, false);
//}
	/**
	инкрементирует переменную и отображает результат
	*/

	//function increaseCount (e) {
		//count++;
		//document.getElementById("currentCount").innerHTML = count;
	//}
	/**
	слудующая функция изменяет размер выводимого в переменной
	*/
	//function changeSize (e) {
		//document.getElementById("currentCount").style.fontSize = count;
	//}





	//дожидаемся загрузки окна и лишь потом регим событие
	//window.addEventListener("load", registerEvents, false);
	//слудующая функция регит событие	
	//function registerEvents (e) {
		//document.getElementById("capTitle").addEventListener("click", makeTiny, true);
		//document.getElementById("capEvent").addEventListener("click", makeHuge, true);
		//document.getElementById("bubTitle").addEventListener("click", makeTiny, false);
		//document.getElementById("bubEvent").addEventListener("click", makeHuge, false);
	//}
	//функция увеличения текста	
	//function makeHuge (e) {
		//console.log("увеличиваем выводимый текст");
		//document.getElementById("theText").style.fontSize = "80px";
	//}
	//функция уменьшения текста
	//function makeTiny (e) {
		//console.log("уье6ньшаем размер тукста");
		//document.getElementById("theText").style.fontSize = "10px";
	//}





//можно отменить все события иллюстрация ниже
//function load (e) {
//if (!е) varе = window.event;
/// у стан о ви ть c a n c e lB u b b le для IE 8 и более ранних //версий
//е.cancelBubble=true;
//if (е.stop Propagation)е.stop Propagation();
//d o c u m e n t.g e tE le m e n tB y ld (" c a p T i t l e " ) . a d d E v e n t L is t e n e r
//( ' c li c k ', m a k e T i n y , t r u e ) ;
//d ocu m en t. g e t E le m e n t B y ld (" c a p E v e n t" ) . a d d E v e n t L is t e n e r
//( ' c lic k ',m a k e H u g e , tru e ) ;
//d o cu m en t. g e t E le m e n t B y ld (" b u b T it le " ) . a d d E v e n t L is t e n e r
//( ' c lic k ', m a k e T in y , f a ls e ) ;
//d o cu m en t. g e t E le m e n t B y ld ("b u b E v e n t" ) . a d d E v e n t L is t e n e r
//( ' c lic k ', m a k e H u g e , f a ls e ) ;





//function setFormDefaults () {
	//document.forms.subscribeForm.method = "post";
	//document.forms.subscribeForm.target = "_blank";
	//document.forms.subscribeForm.action = " h t t p : / / w a t z t h is . u s 9 . lis t - m a n a g e . c o m / s u b s c rib e";
	//прописали метод отправки на сервер
	// прописали открытие в отдельном окне
	// прописали адрес на который нужно отправить данные

	//теперь регим события кнопки формы
	//document.getElementById("btnSubscribe").addEventListener("click", submitForm);
	//document.getElementById("btnReset").addEventListener("click", resetForm);
//}
//дальше пишим функцию отправки
//function submitForm () {
	//document.forms.subscribeForm.submit();
//}

//функция уничтожения или обнуления формы
//function resetForm () {
//	document.forms.subscribeForm.reset();
//}



//выведем все свойства ключей и знаений
//let user = {
	//name: "john",
	//age: 30,
	//isAdmin: true
//};
//for(let key in user) {
	//alert(user[key]);
	//alert(key);
//}








//создаем пустой объект
//let emptyObj = {
	//name: "John",
	//surname: "Smith",
//};
//emptyObj[name] = "Pete";
//delete emptyObj[name];
//alert(emptyObj);



//напишем функцию проверяющую пустой ли объект
//function isEmpty (obj) {
	//let empty = {};
	//for(key in empty){
	//return false;
	//}
	//return true}
//let testFunc = {};
//alert(isEmpty(testFunc));





//напишем код для заданного значения переменных в обхекте
//let salaris = {
	//John: 100,
	//Ann: 130,
	//Pete: 160
//};
//реобходимо написать такую переменную, чтобы она выводила сумму зщарплат
//let sumSalari = (salaris.John + salaris.Ann + salaris.Pete);
//alert(sumSalari);

//другая реализация
//let sum = 0;
//for (let key in salaris){
	//sum += salaris[key];
//}
//alert(sum);






//необходимо умножить все числовые значения объекта на 2

//let menu = {
//	width: 200,
//	height: 200,
//	title: "Mynenu"
//};
// создаем функцию проверки что наш объект содержит числовые данные
//  после чего эти числовые данные умножаем на 2
//function numericMultiple (obj) {
	//предположим что у нас есть не только числовые данные
	// следовательно нам необходимо сначала проверить
	// числа у нас или что-то другое
	// для этого воспользуемся одной встроенной функцией.
//	if (typeOf obj[key] = 'number') {
//		for (let key in menu){
//			menu.[key] * 2;
//		}
//	}
//}
//alert(numericMultiple(menu));





//более приемлемый вариант
//function multiplyNumeric(obj) {
  //for (let key in obj) {
  //  if (typeof obj[key] == 'number') {
   //   obj[key] *= 2;
  //  }
 // }
//}











//пример взаимосвязанных объектов
//function marry (man, woman) {
//	woman.husband = man;
//	man.wife = woman;

//	return {
//		father: man,
//		mother: woman
//	}
//}
//тупурь создаем переменную сумьи и женимся
//let family = marry ({
	//name: "John"
//},{
//	name: "Anna"
//});
//таким образом функция женит два объекта и дает им ссылки друг на друга
//alert(family);
// если мы напишем
// family = null;
//все данные этого объекта уничтожит уборщик мусора


//сщздаем символ с именем id
//описание или имя символа в данном случае id ни на что не влияет
//let id = Symbol("id");
//два символа с одинаковыми именами не равны. пример ниже
//let id1 = Symbol("id");
//let id2 = Symbol("id");
//alert(id1 === id2);
//символы не преобразуюутсмя явно автоматически в строки
//символы позволяют создавать скрытый код
// пример внизу
//Например, мы работаем с объектами user, которые принадлежат стороннему коду. Мы хотим добавить к ним идентификаторы.

//let user = {
//	name: "Вася"
//};
//let id = Symbol("id");

//user[id] = 1;

//alert(user[id]);
//мы воспользовались ключем-сиьволом

// читаем символ из глобального реестра и записываем его в переменную
//let id = Symbol.for("id"); // если символа не существует, он будет создан

// читаем его снова в другую переменную (возможно, из другого места кода)
//let idAgain = Symbol.for("id");

// проверяем -- это один и тот же символ
//alert( id === idAgain ); // true





//получаем символ по имени
//let Sym = Symbol.for("name");
//let Sym2 = Symbol.for("id");
//ф туперб получаем имя по символу
//alert(Symbol.keyFor(Sym));
//alert(Symbol.keyFor(Sym2));
//только для глобальных символов
//но для любых и глобальных и не глобальных символов доступно	
// свойство description пример ниже
//let globalSymbol = Symbol.for("name");
//let localSymbol = Symbol("name");

//выведем

//alert(Symbol.keyFor(globalSymbol));//name
//alert(Symbol.keyFor(localSymbol));//undefine

//но кое что можно сделать чтобы вывести через локальный символ
//alert(localSymbol.description);//name






//ребольшая иллюстрация работы ключевого слова this
//let user = {
//	name: "John",
//	age: 34,
//	sayHi(){
//		alert(this.name);//this это текущий объект
	//}
//};
//user.sayHi();//функция превращается в метод








//иллюстрация потери кл.чевого слова this
//let user = {
//	name: "John",
//	hi() {alert(this.name);},
//	buy() {alert("By");}
//};

//user.hi()//простой метод вызова работает

//(user.name == "John" ? user.hi : user.by)(); //ошибка





//у стрелочных функций нет своего слова this
//пример ниже

//let user = {
	//firstName: "Ilion",
	//lastName: "filimon",
	//sayHi(){
	//	let arrow = () => alert(this.firstName);
	//	arrow();
	//}
//};
//user.sayHi();//выведет Ilion




//function makeUser () {
//	return {
//		name: "John",
	//	ref: this
	//};
//};

//let user = makeUser();
//alert(user.ref.name);//undefined
// мы изменим кое что в вызове и заменим ref на ref()
//ref() {
//	return this}




//пишем калькулятор с методами
//let calcul = {
//	read() {
//		a = +prompt("enter number");
//		b = +prompt("enter number");
//},
//	sum() {
//		return a + b;
//	},
//	mul(){
//		return a * b;
//	}
//};
//создали три метода для нашего калькулятора
//calcul.read();
//alert(calcul.sum());
//alert(calcul.mul());








//цепочесные методы вызовов
//let ladder = {
	//step: 0,
	//up() {
	//	this.step++;
	//	return this;
	//},
	//down() {
	//	this.step--;
	//	return this;
	//},
	//showStep() {
	//	alert(this.step);
	//	return this;
	//}
//}
//вызов по цепочке или иначе летнице	

//ladder
//.up()
//.up()
//.down()
//.down()
//.showStep();//1
 








//Демонстрация получения и установки значений
//полей in p u t формы на примере простого калькулятора

//function registerevents() {
	//document.mathWiz.operate.addEventListener("click", doTheMath, false);
//}

//function doTheMath() {
//	let first = parseInt(document.mathWiz.numberOne.value);
//	let second = parseInt(document.mathWiz.numberTwo.value);
//	let operator = document.mathWiz.operator.value;

//	switch (operator) {
//		case "add":
//		let answer = first + second;
//		break;
//		case "subtract":
//		let answer = first - second;
//		break;
//		case "multiply":
//		let answer = first * second;
//		break;
//		case "divide": 
//		let answer = first / second;
//		break;
//	document.mathWiz.theResult.value = answer;
//}



-->


<script>
//анимация елемента с помощью js

//дождемся загрузки окна
//window.addEventListener('load', initializer, false);

//function initializer() {
	//переместить квадрат после щелчка на нем
	//document.getElementById("square").addEventListener('click', function(e) {
		//получаем начальную позицию
		//let left = window.getComputedStyle(e.target).getPropertyValue("left");
		//преобразовать left в десятичное число
		//left = parseInt(left, 10);
		//moveSquare(left, 100);
	//}, false);
//}




//function moveSquare(left, numMoves) {
	//document.getElementById("square").style.left = left + "px";
		//if (numMoves > 0) {
		//	numMoves--;
		//	left++;
		//	setTimeout(moveSquare,25, left, numMoves)
		//} else {
		//	return;
		//}
	//}









	//работа с изображениями
//заменяем одно изображение другим
//function swapImage(imgToSwap) {
//	imgToSwap.src = "metal_339-292935113.jpg";
	//imgToSwap.alt = "Указатель над кнопкой";
//}
//function swapBack(imgToSwap) {
//	imgToSwap.src = "i.webp";
//	imgToSwap.alt = "Наведи на меня указатель чучело!";
//}


//теперь немного изменяем код для того чтобы изменялся размер
//изображения оно будет немного увеличиваться

//function growImage(imgToGrow) {
//	imgToGrow.windth += imgToGrow.windth * .05;
//	imgToGrow.height += imgToGrow.height * .05;
//}

//function restoreImage(imgToGrow) {
//	imgToGrow.windth = imgToGrow.naturalWindth;
//	imgToGrow.height = imgToGrow.naturalHeight;
//}




//пишем карусель на чистом js без эффекта перехода
//код не особо идеален

//let slides = [
//"<div id='slide1'>my first slide <br><img scr = ''</div>",
//"<div id='slide2'>my two slide <br><img scr = ''</div>",
//"<div id='slide3'>my third slide <br><img scr='22400749.jpg'</div>"
//];

//создали массив с изображениями и дивами
 //let currentSlide = 0;
 //let numberOffSlides = slides.length - 1;


// window.addEventListener("load", loader, false);

// function loader() {
// 	changeImage();
 //}

 //function changeImage() {
 //	console.log("finc changeImage()");
 //	if (currentSlide > numberOffSlides) {
 //		currentSlide = 0;
 //	}
 //	document.getElementById("carousel").innerHTML = slides[currentSlide];
 //	console.log("отображается слайд" + currentSlide + "из" + numberOffSlides);
 //	currentSlide++;
 //	setTimeout(changeImage, 1000);
 //} 


//используем язык в куче с возможностями css

//window.addEventListener("load", registerEvents, false);
//дожидаемся загрузки старницы после чего занимаемся скриптом

//пишем обработчика
//function registerEvents(e) {
//	document.getElementById("stop").addEventListener("click", stopAni, false);
//	document.getElementById("go").addEventListener("click", startAni, false);
//}

//прописываем функционал	

//function stopAni() {
//	document.getElementById("words").style.webkitAnimationPlayState = "paused";
//	document.getElementById("words").style.AnimationPlayState = "paused";
//}

//function startAni() {
//	document.getElementById("words").style.webkitAnimationPlayState = "running";
//	document.getElementById("words").style.AnimationPlayState = "running";
//}






//использование регулярных выражений
//window.addEventListener("load", registerEvents, false);

//function registerEvents(e) {
//	document.getElementById("ask").addEventListener("click", findAnswer, false);
//}
//function findAnswer() {
	//получаем пользовательский вопрос
	//let question = document.getElementById("userQuestion").value;
	/**создаем новое регулярное выражение которое ищет в строках полное совпадение с именем языка JavaScript*/

	//let re = new RegExp("JavaScript");
	//если в запросе найдено необходимое сочетание
	//if (re.test(question) === true) {
		//выводим ответ
	//	document.getElementById("answer").innerHTML = "Вопросы по js ? обратитесь на сайт";
		//пишем js  консоль
	//	console.log("js");
	//}
//}



//создание регулярного выражения используемого во время закгрузки приложения с помощью RegExp

//window.addEventListener("load", loader, false);
//получаем случайную букву	

//let letter = String.fromCharCode(97 + Math.floor(Math.random() * 26));


/** теперь создаем регулярное выражение используя буковку
установить опцию g для нахождения всех вхождений
*/
//let re = new RegExp(letter, 'g');

//теперь пишем функцию обработчика	

//function loader(e) {
	//document.getElementById("getText").addEventListener('submit', countLetter, false);
//}

//пишем функцию подсчета буковок
//function countLetter(e) {
//	e.preventDefault();
//	document.getElementById("results").innerHTML = "Была выбрана секретная буковка" + letter + ".";
//	
//	let userText = document.getElementById("userWords").value;
//	let matches = userText.match(re);
//	let count = matches.length;
//	document.getElementById("results").innerHTML += "Вы ввели секретную букву" + count + "раз.";
//}


//сценарий проверки правильности написания электронной почти с 
// помощью регулярных выражений

//window.addEventListener("load", loader, false);
//function loader(e) {
	//e.preventDefault();
	//document.getElementById("emailinput").addEventListener("submit", validateEmail, false);
//}
//пишем функцию валидации
//function validateEmail(e) {
//	let re = /\[A-Z0-9._&+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b/i;
//	if (re.test(e.target.yourEmail.value)) {
//		alert("Верно!");
//	} else {
//		alert("Не верно!");
//	}
//}







//примеры замыкания функций

//function doMath(number1, number2, callback) {
	//let result = callback(number1, number2);
	//document.getElementById("theResult").innerHTML += ("Результат:" + result + "</br>");
//}
//document.addEventListener("DOMContentLoaded", 
//	function() {
		//doMath(5, 2, function(number1, number2) {
		//	let calculation = number1 * number2;
	//});
		//doMath(10, 3, function(number1, number2) {
		//	let calculation = number1 / number2;
		//	return calculation;
	//});
	//	doMath(81, 9, function(number1, number2) {
	//			let calculation = number1 % number2;
	//			return calculation;
	//});
	//	}, false);


//использование именнованных функций в колбеках

//function doMath(number1, number2, callback) {
	//if (typeof callback === "function") {
	//	let result = callback(number1, number2);
	//	document.getElementById("theResult").innerHTML += (callback.toString() + "<br><br>Результат: " + result + "<br><br>");
	//}
//}

//function multiplyThem(number1, number2) {
//	let calculation = number1 * number2;
//	return calculation;
//} 

//function divideThem(number1, number2) {
//	let calculation = number1 / number2;
//	return calculation;
//}

//function modThem(number1, number2) {
//	let calculation = number1 % number2;
//	return calculation;
//}

//document.addEventListener("DOMContentLoaded", 
//	function () {
//		doMath(5, 2, multiplyThem);
//		doMath(10, 3, divideThem);
//		doMath(81, 9, modThem);
//	}, 
//	false);



//пример создания функции внутри другой функции

//function greetVisitor(phrase) {
//	let Welcome = phrase + "Рад тебя видеть";//это локальная пер-я
//
//	let sayWelcome = function() {
//		alert(Welcome);
//	}
//	return sayWelcome;
//}

//let personalGreeting = greetVisitor("Привет");
//personalGreeting();//Привет рад видеть тебя

//alert("personalGreeting.toString()\n\n" + personalGreeting.toString());



//function Question(question) {
//	let ph = function() {
//		let mom = question + prompt("fghhf");
//		alert(mom);
//	}
//	return ph;
//}
//let boom = Question("xnj nfv?");
//boom();



//пример замыканий с секретными ссылками

//function greetVisitor(phrase) {
//	let welcome = phrase + ".Hellow<br><br>";//local variable
//	let sayWelcome = function() {
//		document.getElementById("greeting").innerHTML += welcome;
//	}

//	return sayWelcome;
//}
//ждем пока загрузиться страница	

//	document.addEventListener("DOMContentLoaded",
//		function() {
			//создать функцию
//			let personalGreeting = greetVisitor("Hola Amiga");
			//создаем еще одну функцию
//			let anotherGreeting = greetVisitor("Howdy fraind");

			//просмотрим код первой функции
//			document.getElementById("greeting").innerHTML +=
//			"personalGreeting.toString()<br>" + 
//			personalGreeting.toString() + "<br>";

			//теперь выполняем код первой функции
//
//			personalGreeting();//hola amiga рад тебя видеть

			//теперь просматриваем вторую функцию
//
	//		document.getElementById("greeting").innerHTML += 
	//		"anotherGreeting.toString() <br>" + anotherGreeting + "<br>";
			//выполним ее

		//	anotherGreeting();//hola amiga рад видеть тебя

			//дальше завершаем метод слушателя событий

		//}, false);




//построение фабрики по производству функций

//function createMessageAlert(theMessage) {
	//return function() {
	//	alert(theMessage);
	//}
//}
// let badEmailError = createMessageAlert("Hеизвестный адресс электронной почты");
//let wrongPassportError = createMessageAlert("Хреновый пароль");

 //window.addEventListener("load", loader, false);

 //function loader() {
 //	document.login.yourEmail.addEventListener("change", badEmailError);
 //	document.login.yourPassword.addEventListener("change", wrongPassportError);
 //}

//задача с собеседования
//let fign = (2).plus(3).minus(1);
//Number.prototype.pluse = function(value) {
//	return this + value;
//}
//Number.prototype.minus = function(value) {
//	return this - value;
//}

//ипользование XMLHttpRequest
//window.addEventListener("load", init, false);

//function init(e) {
//	document.getElementById("myButton").addEventListener("click", documentLoader, false);
//}

//function reqListener() {
//	console.log(this.responseText);
//	document.getElementById("content").innerHTML = this.responseText;
//}
//главная функция следующая
//function documentLoader() {
//	let oReq = new XMLHttpRequest();
//	oReq.onload = reqListener;
//	oReq.open("get", "loadme.txt", true);
//	oReq.send();
//}






//отображение json с помощью js

//window.addEventListener("load", init, false);

//function init(e) {
//	document.getElementById("myButton").addEventListener('click', documentLoader, false);
//}

//function reqListemer() {
	//преобразуем объект в строку с помощью функции parseJSON
//	let obj = JSONparse(this.responseText);
	//отображаем данные объекта обычным способом
//	document.getElementById("book_titte").innerHTML = obj.book_titte;
//	document.getElementById("book_author").innerHTML = obj.book_author;
	//document.getElementById("summary").innerHTML = obj.summary;

//}


//function documentLoader() {
	//let oReq = new XMLHttpRequest();
	//oReq.onload = reqListener;
	//oReq.open = ("get", "Листинг16-4.json",true);
	//oReq.send();
//}






//получение геолокации и ее отражение в браузере
//let gps = navigator.geolocation.getCurrentPosition(
	//function(position) {
	//	for (key in position.coords) {
		//	document.write(key + ":" + position.coords[key]);
		//	document.write("<br>");
		//}
	//});


//работа с видео и аудио	


//window.addEventListener("DOMContentLoaded", function() {
//	let v = document.getElementById("v");
//	navigator.GetUserMedia();

//	if(navigator.GetUserMedia) {
		//запрашиваем доступ только к видео
//		navigator.GetUserMedia(
//		{
	//		video: true,
	//		audio: false
	//	},
	//	function(stream) {
	//		let url = window.URL || window.webkitURL;
	//		v.src = url?url.createObjectURL(stream) : stream;
	//		v.play;
	//	},
	//	function(error) {
		//	alert("Чтото пошло не так (код ошибки" + error.code + ')');
		//	return;
	//	}
	//	);
	//}
	//else {
	//	alert("Извините");
	//	return;
	//};
//});
//ре все браузеры поддерживают и не получилось у меня по нормальному запустить эту хреновину
//возможно что-то упустил из виду но пока на это нет времени



//for
/*let r = 1;
for (let i = 0; i < 10; i = i+1) {
	r = r * 2;
}
console.log(r);*/
//
//
/*for (let current = 20;; current++){
	if (current % 7 == 0) {
		console.log(current);
		break;
	}
}*/
//
//
//
//switch
/*switch (prompt("How do you do?")){
	case "bad": 	
	console.log("OK!");
	break;
	case "good":
	console.log("wow!");
	console.log("go to wolk!");
	break;
	case "funny":
	console.log("its bad");
	break;
}*/
//
//
//
//
/*
let treangle = "#";
for (let i = 0; i <= 7; i++) {
	treangle = treangle + "#";
	console.log(treangle);
}*/
//
//
//
//
//interesting exsemple
/*
let numFromUnit = 0;
for(let unit = 0; unit <= 101; unit++) {
	numFromUnit++;
	console.log(numFromUnit)
	if (numFromUnit % 3 == 0 && numFromUnit % 5 == 0) {
		console.log("FizzBeezz");
	}else if (numFromUnit % 3 == 0){
		console.log("fizz");
	}else if (numFromUnit % 5 == 0){
		console.log("Beezz");
	}
	}
	*/
//
//
//
//
/*
let squareOne = "# # # # ";
let squareTwo = " # # # #";
for (let size = 0; size < 4; size++) {
	console.log(squareOne);
	console.log(squareTwo);
}
*/
//
//
//
//use function: example with square number
/*const square = function(x) {
	return x * x;
}
console.log(square(12));*/
//
//
//
//use function: without arguments
/*
const makeNoise = function() {//no arguments
	console.log("Hellow!");
};
makeNoise();

const power = function(base, exponent) {//two arguments
	let result = 1;
	for(let count = 0; count < exponent; count++) {
		result *= base;
	}
	return result;
};
console.log(power(4, 3));
*/
//
//
//make global and local variable
/* 
let x = 10;
if(true) {
	let y = 20;
	let z = 30;
	console.log(x + y - z);
}
console.log(x + z);//y not visible
*/
//
//
//
//visible myself local variable
/*
const halve = function(n) {
	return n/2;
};

let n = 10;

console.log(halve(100));
console.log(10);
*/
//
//
//
//more locals variable
/*const hummus = function(factor) {
	const ingridient = function(amount, unit, name) {
		let ingridientAmount = amount * factor;
		if(ingridientAmount > 1) {
			unit + "s";
		}
		console.log('${ingridientAmount} ${unit} ${name}');
	}
	ingridient(1, "Bank", "Nuta");
};
hummus();
*/
//
//
//
//change function
/*let launchMissiles = function() {
	missileSistem.launch = "now";
};
if(safeMode) {
	launchMissiles = function() {

	}
}*/
//
//
//
//use function after used function in variable
/*
console.log("Noise from future:", future());
function future() {
	return "All is bad";
}
*/
//
//
//
//use => function
/*
const power = (base, exponent) => {
	let result = 1;
	for(let count = 0; count < exponent; count++) {
		result *= base;
	}
	return result
};
*/

/*
const cub = x => x * x * x;
console.log(cub(12));
*/
/*
const horns = () => {
	console.log("Toot");
}
*/
//
//
//
//
//recursi
/*
function chiken() {
	return egg();
}
function egg() {
	return chiken();
}
console.log(chiken() + "first");
*/
//
//
//
//ignor arguments
/*
function minus(a, b) {
	if(b === undefined)
		return -a;
	else
		return a - b;
}
console.log(minus(20));
console.log(minus(23, 32));
*/
//
//
//
//
//
/*
function wrapValue(n) {
	let local = 4;
	return () => local;
}
let wrap1 = wrapValue(1);
let wrap2 = wrapValue(2);
console.log(wrap1() + wrap2());
*/
//
//
//
/*
function multiply(factor) {
	return number => number * factor;
}
let twice = multiply(5);
console.log(twice(5));
*/
//
//
//
//recursi
/*
function power (base, exponent) {
	if(exponent == 0) {
		return 1
	}else {
		return base * power(base, exponent - 1);
	}
}
console.log(power(4, 5));
*/
//
//
//
//find number with recursi
/*
function findSolution(target) {
	function find(current, history) {
		if (current == target) {
			return history;
		} else if (current > target) {
			return null;
		} else {
			return find(current + 5, '(${history} + 5)') ||
				    find(current * 3, '(${history} * 3)');
		}
	}
	return find(1, "1");
}
console.log(findSolution(24));*/
//
//
//
//
//
//
/*
function primeFarmInventory(cows, chikens) {
	let cowString = String(cows);
	while(cowString.length < 3) {
		cowString = "0" + cowString;
	}
	console.log(cowString +  'коров');
	let chikensString = String(chikens);
	while(chikensString.length < 3) {
		chikensString = "0" + chikensString;
	}
	console.log(chikensString + 'цыплят');
		
	}
	primeFarmInventory(12, 12);
	*/
//
//
//
//
//
/*
function zeroPad(number, width) {
let string = String(number);
while (string.length < width) {
string = "0" + string;
}
return string;
}
*/
//
//
//
//

/*
function min(a, b) {
	if(a < b)
		return a;
	else 
		return b;
}
console.log(min(2, 4));
*/
//
//
//
//
/*
function isEven(N) {
	
	if ((N - 2)% 2 == 0)
		return true;
	else 
		return false;
}
console.log(isEven(-1));
*/
//
//
//
/*function countChar(string, ch) {
	string = String(string);
	ch = String(ch);
	let counted = 0;
	for(let i = 0; i < string.length; i++) {
		if(string[i] == ch) {
			counted += 1;
		}
	}
	return counted;
}
console.log(countChar("dddddd", "d"));
*/
/*
function numberSearch(number, numberMass) {
	number = String(number);
	numberMass = String(numberMass);
	let countNumber = 0;
	for(let j = 0; j < number.length; j++) {
		if(number[j] == numberMass) {
			countNumber += 1;
		}
	}
	return countNumber;
}
console.log(numberSearch("123333444444", "4"));
*/
//
//
//
//list and array
/*
let listOfNumber = [1, 2, 3, 4, 5];
console.log(listOfNumber[1 + 2]);
*/
//
//
//
//
//
/*
let doh = "Yyyyehoooo";
console.log(typeof doh.toUpperCase);
//function
console.log(doh.toUpperCase());
//"YYYYYEHOOOO"
*/
//
//
//
//
/*
let sequence = [1, 2, 3, 4, 5, 6];
sequence.push[5];
sequence.push[4];
console.log(sequence);
console.log(sequence.pop());
console.log(sequence);
*/
//
//
//
//
//Objects///////////////////////////////////////////////////////////
/*
let anObject = {
	left: 0,
	right: 1
};
console.log(anObject.left);
//0
delete anObject.left;
console.log(anObject.left);
//undefined
console.log("left" in anObject);
//false
console.log("right" in anObject);
//true
*/
//
//
//
//
//console.log(Object.keys({x: 1, y: 2, z: 3}))
//x, y, z
//
//
//
//
/*
let objectA = {
	a: 1,
	b: 2,
	c: 3
};
Object.assign(objectA, {b: 3, c: 4});
console.log(objectA);
*/
//
//
//
//
/*
let JOURNAL = [
  {"events":["carrot","exercise","weekend"],"squirrel":false},
  {"events":["bread","pudding","brushed teeth","weekend","touched tree"],"squirrel":false},
  {"events":["carrot","nachos","brushed teeth","cycling","weekend"],"squirrel":false},
  {"events":["brussel sprouts","ice cream","brushed teeth","computer","weekend"],"squirrel":false},
  {"events":["potatoes","candy","brushed teeth","exercise","weekend","dentist"],"squirrel":false},
  {"events":["brussel sprouts","pudding","brushed teeth","running","weekend"],"squirrel":false},
  {"events":["pizza","brushed teeth","computer","work","touched tree"],"squirrel":false},
  {"events":["bread","beer","brushed teeth","cycling","work"],"squirrel":false},
  {"events":["cauliflower","brushed teeth","work"],"squirrel":false},
  {"events":["pizza","brushed teeth","cycling","work"],"squirrel":false},
  {"events":["lasagna","nachos","brushed teeth","work"],"squirrel":false},
  {"events":["brushed teeth","weekend","touched tree"],"squirrel":false},
  {"events":["lettuce","brushed teeth","television","weekend"],"squirrel":false},
  {"events":["spaghetti","brushed teeth","work"],"squirrel":false},
  {"events":["brushed teeth","computer","work"],"squirrel":false},
  {"events":["lettuce","nachos","brushed teeth","work"],"squirrel":false},
  {"events":["carrot","brushed teeth","running","work"],"squirrel":false},
  {"events":["brushed teeth","work"],"squirrel":false},
  {"events":["cauliflower","reading","weekend"],"squirrel":false},
  {"events":["bread","brushed teeth","weekend"],"squirrel":false},
  {"events":["lasagna","brushed teeth","exercise","work"],"squirrel":false},
  {"events":["spaghetti","brushed teeth","reading","work"],"squirrel":false},
  {"events":["carrot","ice cream","brushed teeth","television","work"],"squirrel":false},
  {"events":["spaghetti","nachos","work"],"squirrel":false},
  {"events":["cauliflower","ice cream","brushed teeth","cycling","work"],"squirrel":false},
  {"events":["spaghetti","peanuts","computer","weekend"],"squirrel":true},
  {"events":["potatoes","ice cream","brushed teeth","computer","weekend"],"squirrel":false},
  {"events":["potatoes","ice cream","brushed teeth","work"],"squirrel":false},
  {"events":["peanuts","brushed teeth","running","work"],"squirrel":false},
  {"events":["potatoes","exercise","work"],"squirrel":false},
  {"events":["pizza","ice cream","computer","work"],"squirrel":false},
  {"events":["lasagna","ice cream","work"],"squirrel":false},
  {"events":["cauliflower","candy","reading","weekend"],"squirrel":false},
  {"events":["lasagna","nachos","brushed teeth","running","weekend"],"squirrel":false},
  {"events":["potatoes","brushed teeth","work"],"squirrel":false},
  {"events":["carrot","work"],"squirrel":false},
  {"events":["pizza","beer","work","dentist"],"squirrel":false},
  {"events":["lasagna","pudding","cycling","work"],"squirrel":false},
  {"events":["spaghetti","brushed teeth","reading","work"],"squirrel":false},
  {"events":["spaghetti","pudding","television","weekend"],"squirrel":false},
  {"events":["bread","brushed teeth","exercise","weekend"],"squirrel":false},
  {"events":["lasagna","peanuts","work"],"squirrel":true},
  {"events":["pizza","work"],"squirrel":false},
  {"events":["potatoes","exercise","work"],"squirrel":false},
  {"events":["brushed teeth","exercise","work"],"squirrel":false},
  {"events":["spaghetti","brushed teeth","television","work"],"squirrel":false},
  {"events":["pizza","cycling","weekend"],"squirrel":false},
  {"events":["carrot","brushed teeth","weekend"],"squirrel":false},
  {"events":["carrot","beer","brushed teeth","work"],"squirrel":false},
  {"events":["pizza","peanuts","candy","work"],"squirrel":true},
  {"events":["carrot","peanuts","brushed teeth","reading","work"],"squirrel":false},
  {"events":["potatoes","peanuts","brushed teeth","work"],"squirrel":false},
  {"events":["carrot","nachos","brushed teeth","exercise","work"],"squirrel":false},
  {"events":["pizza","peanuts","brushed teeth","television","weekend"],"squirrel":false},
  {"events":["lasagna","brushed teeth","cycling","weekend"],"squirrel":false},
  {"events":["cauliflower","peanuts","brushed teeth","computer","work","touched tree"],"squirrel":false},
  {"events":["lettuce","brushed teeth","television","work"],"squirrel":false},
  {"events":["potatoes","brushed teeth","computer","work"],"squirrel":false},
  {"events":["bread","candy","work"],"squirrel":false},
  {"events":["potatoes","nachos","work"],"squirrel":false},
  {"events":["carrot","pudding","brushed teeth","weekend"],"squirrel":false},
  {"events":["carrot","brushed teeth","exercise","weekend","touched tree"],"squirrel":false},
  {"events":["brussel sprouts","running","work"],"squirrel":false},
  {"events":["brushed teeth","work"],"squirrel":false},
  {"events":["lettuce","brushed teeth","running","work"],"squirrel":false},
  {"events":["candy","brushed teeth","work"],"squirrel":false},
  {"events":["brussel sprouts","brushed teeth","computer","work"],"squirrel":false},
  {"events":["bread","brushed teeth","weekend"],"squirrel":false},
  {"events":["cauliflower","brushed teeth","weekend"],"squirrel":false},
  {"events":["spaghetti","candy","television","work","touched tree"],"squirrel":false},
  {"events":["carrot","pudding","brushed teeth","work"],"squirrel":false},
  {"events":["lettuce","brushed teeth","work"],"squirrel":false},
  {"events":["carrot","ice cream","brushed teeth","cycling","work"],"squirrel":false},
  {"events":["pizza","brushed teeth","work"],"squirrel":false},
  {"events":["spaghetti","peanuts","exercise","weekend"],"squirrel":true},
  {"events":["bread","beer","computer","weekend","touched tree"],"squirrel":false},
  {"events":["brushed teeth","running","work"],"squirrel":false},
  {"events":["lettuce","peanuts","brushed teeth","work","touched tree"],"squirrel":false},
  {"events":["lasagna","brushed teeth","television","work"],"squirrel":false},
  {"events":["cauliflower","brushed teeth","running","work"],"squirrel":false},
  {"events":["carrot","brushed teeth","running","work"],"squirrel":false},
  {"events":["carrot","reading","weekend"],"squirrel":false},
  {"events":["carrot","peanuts","reading","weekend"],"squirrel":true},
  {"events":["potatoes","brushed teeth","running","work"],"squirrel":false},
  {"events":["lasagna","ice cream","work","touched tree"],"squirrel":false},
  {"events":["cauliflower","peanuts","brushed teeth","cycling","work"],"squirrel":false},
  {"events":["pizza","brushed teeth","running","work"],"squirrel":false},
  {"events":["lettuce","brushed teeth","work"],"squirrel":false},
  {"events":["bread","brushed teeth","television","weekend"],"squirrel":false},
  {"events":["cauliflower","peanuts","brushed teeth","weekend"],"squirrel":false}
];

function jornalEvents(jornal) {
	let events = [];
	for(let entry of jornal) {
		for(let event of entry.events){
			if(!events.includes(event)){
				events.push(event);
			}
		}
	}
	return events;
}
console.log(jornalEvents(JOURNAL));

function phi(table) {
	return (table[3] * table[0] - table[2] * table[1]) /
	Math.sqrt((table[2] + table[3]) *
		(table[0] + table[1]) *
		(table[1] + table[3]) *
		(table[0] + table[2]));
}

function tableFor(event, jornal) {
	let table = [0, 0, 0, 0];
	for (let i = 0; i < jornal.length; i++) {
		let entry = jornal[i], index = 0;
		if (entry.events.includes(event)) index += 1;
		if(entry.squirrel) index += 2;
		table[index] += 1;

	}
	return table;
}
for (let event of jornalEvents(JOURNAL)) {
	let correlation = phi(tableFor(event, JOURNAL));
	if (correlation > 0.1 || correlation < -0.1) {
		console.log(event + ":", correlation);
	}
}

for(let entry of JOURNAL) {
	if(entry.events.includes("brushed teeth") &&
		!entry.events.includes("potatoes")) {
		entry.events.push("teeth - potatoes");
	}
}
console.log(phi(tableFor("teeth - potatoes", JOURNAL)));
*/
//console.log(event + " : ", phi(tableFor("television", JOURNAL)));
//
//
//
//
//
//
//
/*
let todolist = [];
function rememeber(task) {
	todolist.push(task);
}
function getTask() {
	return todolist.shift();
}
function rememberUrgently(task) {
	todolist.unshift(task);
}
*/
//
//
//
//
//
/*
console.log([1, 3, 5, 7, 9].indexOf(9));
console.log([2, 4, 6, 8, 20].lastIndexOf(4));
*/
//
//
//
//methods of list
/*
console.log([2, 4, 6, 8, 20].slice(2, 4));
console.log([2, 4, 6, 8, 20].slice(2));
console.log([2, 4, 6, 8, 20].slice(5));
console.log([2, 4, 6, 8, 20].concat(3, 5, 8));


//method of string
console.log("cocos".slice(1, 4));//oco
console.log("cocos".indexOf("c"));//0
console.log("cocos \n".trim());//cocos
console.log(String(8).padStart(3, "0"));//008
let sentence = "Are you  ready?";
let words = sentence.split(" ");
console.log(words);
console.log(words.join(". "));
console.log("la".repeat(12));

let word = ["never", "mind"];
console.log(["i", ...word, "no understand"]);
*/
//
//
//
//
//
//Math
/*
function randomPointOnCircle(radius) {
	let angle = Math.random() * 2 * Math.PI;
	return{
		x: radius * Math.cos(angle),
		y: radius * Math.sin(angle)
	};
}
console.log(randomPointOnCircle(7));
*/
//
//
//
//
//json
/*
let string = JSON.stringify ({
	squirrel: false,
	events: ["weekend"]
});
console.log(string);
console.log(JSON.parse(string).events);
*/
//
//
//
//
/*
function range (start, end, step = start < end ? 1 : -1) {
	let array = [];

	if (step > 0) {
		for (let i = start; i <= end; i += step) array.push(i);
	} else {
		for (let i = start; i <= end; i += step) array.push(i)
	}
return array;
}


function summ(array) {
	let total = 0;
	for (let value of array) {
		total += value;
	}
	return total;
}

console.log(range(2, 40, 5));
console.log(summ(range(1, 10)));
*/
//
//
//
//
//
//method reverse
/*
function reverseArray(array) {
	let output = [];
	for(let i = array.length - 1; i >= 0; i--) {
		output.push(array[i]);
	}
	return output;
}

function reverseArrayInPlace(array) {
	for (let i = 0; i <= Math.floor(array.length / 2); i++){
		let old = array[i];
		array[i]  = array[array.length - 1 - i];
		array[array.length - 1 - i] = old;
	}
	return array;
}
console.log(reverseArray([1, 2, 3, 4, 5]));
let br = [1, 2, 3, 4, 5];
reverseArrayInPlace(br);
console.log(br);
*/
//
//
//
/*
function arrayToList(array) {
	let list = null;
	for (let i = array.length - 1; i >= 0; i--) {
		list = {
			value: array[i],
			rest: list
		};
	}
	return list;
}

function listToArray(list) {
	let array = [];
	for (let node = list; node; node = node.rest) {
		array.push(node,value);
	}
	return array;
}

function prepend(value, list) {
	return {
		value, 
		rest: list
	};
}

function nth(list, n) {
	if (!list) return undefined;
	else if (n == 0) return list.value;
	else return nth(list.rest, n - 1);
}
console.log(arrayToList([10, 20]));
console.log(listToArray(arrayToList([10, 20, 30])));
console.log(prepend(10, prepend(20, null)));
console.log(nth(arrayToList([10, 20, 30]), 1));
*/
//
//
//
//
//
//
/*
function deepEqual (a, b) {
	if (a === b) return true;
	if (a == null || typeof a != "object" ||
		b == null || typeof b != "object") return false;

	let keysA = Object.keys(a), keysB = Object.keys(b);
	if (keysA.length != keysB.length) return false;

	for (let key of keysA) {
		if (!keysB.includes(key) || !deepEqual(a[key], b[key])) return false;
	}
	return true;
}

let obj = {
	here: {
		is: "an"
	},
	object: 2
};
console.log(deepEqual(obj, obj));
*/
//
//
//
//
//
/*
function repeat(n, action) {
	for (let i = 0; i < n; i++) {
		console.log(action);
	}
}
repeat(6, console.log);
*/
//
//
//
//
/*
function filter(array, test) {
	let passed = [];
	for (let element of array) {
		if (test(element)) {
			passed.push(element);
		}
	}
	return passed;
}

console.log(filter(SCRIPTS, script => script.loving));
*/
//
//
//
//
//
// Generated from the Unicode 10 database and https://en.wikipedia.org/wiki/Script_(Unicode)

let SCRIPTS = [
  {
    name: "Adlam",
    ranges: [[125184, 125259], [125264, 125274], [125278, 125280]],
    direction: "rtl",
    year: 1987,
    living: true,
    link: "https://en.wikipedia.org/wiki/Fula_alphabets#Adlam_alphabet"
  },
  {
    name: "Caucasian Albanian",
    ranges: [[66864, 66916], [66927, 66928]],
    direction: "ltr",
    year: 420,
    living: false,
    link: "https://en.wikipedia.org/wiki/Caucasian_Albanian_alphabet"
  },
  {
    name: "Ahom",
    ranges: [[71424, 71450], [71453, 71468], [71472, 71488]],
    direction: "ltr",
    year: 1250,
    living: false,
    link: "https://en.wikipedia.org/wiki/Ahom_alphabet"
  },
  {
    name: "Arabic",
    ranges: [[1536, 1541], [1542, 1548], [1549, 1563], [1564, 1565], [1566, 1567], [1568, 1600], [1601, 1611], [1622, 1648], [1649, 1757], [1758, 1792], [1872, 1920], [2208, 2229], [2230, 2238], [2260, 2274], [2275, 2304], [64336, 64450], [64467, 64830], [64848, 64912], [64914, 64968], [65008, 65022], [65136, 65141], [65142, 65277], [69216, 69247], [126464, 126468], [126469, 126496], [126497, 126499], [126500, 126501], [126503, 126504], [126505, 126515], [126516, 126520], [126521, 126522], [126523, 126524], [126530, 126531], [126535, 126536], [126537, 126538], [126539, 126540], [126541, 126544], [126545, 126547], [126548, 126549], [126551, 126552], [126553, 126554], [126555, 126556], [126557, 126558], [126559, 126560], [126561, 126563], [126564, 126565], [126567, 126571], [126572, 126579], [126580, 126584], [126585, 126589], [126590, 126591], [126592, 126602], [126603, 126620], [126625, 126628], [126629, 126634], [126635, 126652], [126704, 126706]],
    direction: "rtl",
    year: 400,
    living: true,
    link: "https://en.wikipedia.org/wiki/Arabic_script"
  },
  {
    name: "Imperial Aramaic",
    ranges: [[67648, 67670], [67671, 67680]],
    direction: "rtl",
    year: 800,
    living: false,
    link: "https://en.wikipedia.org/wiki/Aramaic_alphabet"
  },
  {
    name: "Armenian",
    ranges: [[1329, 1367], [1369, 1376], [1377, 1416], [1418, 1419], [1421, 1424], [64275, 64280]],
    direction: "ltr",
    year: 405,
    living: true,
    link: "https://en.wikipedia.org/wiki/Armenian_alphabet"
  },
  {
    name: "Avestan",
    ranges: [[68352, 68406], [68409, 68416]],
    direction: "rtl",
    year: 400,
    living: false,
    link: "https://en.wikipedia.org/wiki/Avestan_alphabet"
  },
  {
    name: "Balinese",
    ranges: [[6912, 6988], [6992, 7037]],
    direction: "ltr",
    year: 1000,
    living: true,
    link: "https://en.wikipedia.org/wiki/Balinese_script"
  },
  {
    name: "Bamum",
    ranges: [[42656, 42744], [92160, 92729]],
    direction: "ltr",
    year: 1896,
    living: true,
    link: "https://en.wikipedia.org/wiki/Bamum_script"
  },
  {
    name: "Bassa Vah",
    ranges: [[92880, 92910], [92912, 92918]],
    direction: "ltr",
    year: 1950,
    living: false,
    link: "https://en.wikipedia.org/wiki/Bassa_alphabet"
  },
  {
    name: "Batak",
    ranges: [[7104, 7156], [7164, 7168]],
    direction: "ltr",
    year: 1300,
    living: true,
    link: "https://en.wikipedia.org/wiki/Batak_alphabet"
  },
  {
    name: "Bengali",
    ranges: [[2432, 2436], [2437, 2445], [2447, 2449], [2451, 2473], [2474, 2481], [2482, 2483], [2486, 2490], [2492, 2501], [2503, 2505], [2507, 2511], [2519, 2520], [2524, 2526], [2527, 2532], [2534, 2558]],
    direction: "ltr",
    year: 1050,
    living: true,
    link: "https://en.wikipedia.org/wiki/Bengali_alphabet"
  },
  {
    name: "Bhaiksuki",
    ranges: [[72704, 72713], [72714, 72759], [72760, 72774], [72784, 72813]],
    direction: "ltr",
    year: 1050,
    living: false,
    link: "https://en.wikipedia.org/wiki/Bhaiksuki_alphabet"
  },
  {
    name: "Bopomofo",
    ranges: [[746, 748], [12549, 12591], [12704, 12731]],
    direction: "ltr",
    year: 1918,
    living: true,
    link: "https://en.wikipedia.org/wiki/Bopomofo"
  },
  {
    name: "Brahmi",
    ranges: [[69632, 69710], [69714, 69744], [69759, 69760]],
    direction: "ltr",
    year: -250,
    living: false,
    link: "https://en.wikipedia.org/wiki/Brahmi_script"
  },
  {
    name: "Braille",
    ranges: [[10240, 10496]],
    direction: "ltr",
    year: 1824,
    living: true,
    link: "https://en.wikipedia.org/wiki/Braille"
  },
  {
    name: "Buginese",
    ranges: [[6656, 6684], [6686, 6688]],
    direction: "ltr",
    year: 1650,
    living: true,
    link: "https://en.wikipedia.org/wiki/Lontara_script"
  },
  {
    name: "Buhid",
    ranges: [[5952, 5972]],
    direction: "ltr",
    year: 1300,
    living: true,
    link: "https://en.wikipedia.org/wiki/Buhid_alphabet"
  },
  {
    name: "Chakma",
    ranges: [[69888, 69941], [69942, 69956]],
    direction: "ltr",
    year: 1050,
    living: true,
    link: "https://en.wikipedia.org/wiki/Chakma_alphabet"
  },
  {
    name: "Canadian Aboriginal",
    ranges: [[5120, 5760], [6320, 6390]],
    direction: "ltr",
    year: 1840,
    living: true,
    link: "https://en.wikipedia.org/wiki/Canadian_Aboriginal_syllabics"
  },
  {
    name: "Carian",
    ranges: [[66208, 66257]],
    direction: "ltr",
    year: -650,
    living: false,
    link: "https://en.wikipedia.org/wiki/Carian_alphabets"
  },
  {
    name: "Cham",
    ranges: [[43520, 43575], [43584, 43598], [43600, 43610], [43612, 43616]],
    direction: "ltr",
    year: 750,
    living: true,
    link: "https://en.wikipedia.org/wiki/Cham_alphabet"
  },
  {
    name: "Cherokee",
    ranges: [[5024, 5110], [5112, 5118], [43888, 43968]],
    direction: "ltr",
    year: 1820,
    living: true,
    link: "https://en.wikipedia.org/wiki/Cherokee_syllabary"
  },
  {
    name: "Coptic",
    ranges: [[994, 1008], [11392, 11508], [11513, 11520]],
    direction: "ltr",
    year: -200,
    living: false,
    link: "https://en.wikipedia.org/wiki/Coptic_alphabet"
  },
  {
    name: "Cypriot",
    ranges: [[67584, 67590], [67592, 67593], [67594, 67638], [67639, 67641], [67644, 67645], [67647, 67648]],
    direction: "rtl",
    year: -1100,
    living: false,
    link: "https://en.wikipedia.org/wiki/Cypriot_syllabary"
  },
  {
    name: "Cyrillic",
    ranges: [[1024, 1157], [1159, 1328], [7296, 7305], [7467, 7468], [7544, 7545], [11744, 11776], [42560, 42656], [65070, 65072]],
    direction: "ltr",
    year: 950,
    living: true,
    link: "https://en.wikipedia.org/wiki/Cyrillic_script"
  },
  {
    name: "Devanagari",
    ranges: [[2304, 2385], [2387, 2404], [2406, 2432], [43232, 43262]],
    direction: "ltr",
    year: 100,
    living: true,
    link: "https://en.wikipedia.org/wiki/Devanagari"
  },
  {
    name: "Deseret",
    ranges: [[66560, 66640]],
    direction: "ltr",
    year: 1854,
    living: true,
    link: "https://en.wikipedia.org/wiki/Deseret_alphabet"
  },
  {
    name: "Duployan",
    ranges: [[113664, 113771], [113776, 113789], [113792, 113801], [113808, 113818], [113820, 113824]],
    direction: "ltr",
    year: 1860,
    living: true,
    link: "https://en.wikipedia.org/wiki/Duployan_shorthand"
  },
  {
    name: "Egyptian Hieroglyphs",
    ranges: [[77824, 78895]],
    direction: "ltr",
    year: -3200,
    living: false,
    link: "https://en.wikipedia.org/wiki/Egyptian_hieroglyphs"
  },
  {
    name: "Elbasan",
    ranges: [[66816, 66856]],
    direction: "ltr",
    year: 1750,
    living: false,
    link: "https://en.wikipedia.org/wiki/Elbasan_alphabet"
  },
  {
    name: "Ethiopic",
    ranges: [[4608, 4681], [4682, 4686], [4688, 4695], [4696, 4697], [4698, 4702], [4704, 4745], [4746, 4750], [4752, 4785], [4786, 4790], [4792, 4799], [4800, 4801], [4802, 4806], [4808, 4823], [4824, 4881], [4882, 4886], [4888, 4955], [4957, 4989], [4992, 5018], [11648, 11671], [11680, 11687], [11688, 11695], [11696, 11703], [11704, 11711], [11712, 11719], [11720, 11727], [11728, 11735], [11736, 11743], [43777, 43783], [43785, 43791], [43793, 43799], [43808, 43815], [43816, 43823]],
    direction: "ltr",
    year: -900,
    living: true,
    link: "https://en.wikipedia.org/wiki/Ge%27ez_script"
  },
  {
    name: "Georgian",
    ranges: [[4256, 4294], [4295, 4296], [4301, 4302], [4304, 4347], [4348, 4352], [11520, 11558], [11559, 11560], [11565, 11566]],
    direction: "ltr",
    year: 430,
    living: true,
    link: "https://en.wikipedia.org/wiki/Georgian_scripts"
  },
  {
    name: "Glagolitic",
    ranges: [[11264, 11311], [11312, 11359], [122880, 122887], [122888, 122905], [122907, 122914], [122915, 122917], [122918, 122923]],
    direction: "ltr",
    year: 862,
    living: false,
    link: "https://en.wikipedia.org/wiki/Glagolitic_script"
  },
  {
    name: "Masaram Gondi",
    ranges: [[72960, 72967], [72968, 72970], [72971, 73015], [73018, 73019], [73020, 73022], [73023, 73032], [73040, 73050]],
    direction: "ltr",
    year: 1918,
    living: true,
    link: "https://en.wikipedia.org/wiki/Gondi_writing#Masaram"
  },
  {
    name: "Gothic",
    ranges: [[66352, 66379]],
    direction: "ltr",
    year: 350,
    living: false,
    link: "https://en.wikipedia.org/wiki/Gothic_alphabet"
  },
  {
    name: "Grantha",
    ranges: [[70400, 70404], [70405, 70413], [70415, 70417], [70419, 70441], [70442, 70449], [70450, 70452], [70453, 70458], [70460, 70469], [70471, 70473], [70475, 70478], [70480, 70481], [70487, 70488], [70493, 70500], [70502, 70509], [70512, 70517]],
    direction: "ltr",
    year: 550,
    living: false,
    link: "https://en.wikipedia.org/wiki/Grantha_alphabet"
  },
  {
    name: "Greek",
    ranges: [[880, 884], [885, 888], [890, 894], [895, 896], [900, 901], [902, 903], [904, 907], [908, 909], [910, 930], [931, 994], [1008, 1024], [7462, 7467], [7517, 7522], [7526, 7531], [7615, 7616], [7936, 7958], [7960, 7966], [7968, 8006], [8008, 8014], [8016, 8024], [8025, 8026], [8027, 8028], [8029, 8030], [8031, 8062], [8064, 8117], [8118, 8133], [8134, 8148], [8150, 8156], [8157, 8176], [8178, 8181], [8182, 8191], [8486, 8487], [43877, 43878], [65856, 65935], [65952, 65953], [119296, 119366]],
    direction: "ltr",
    year: -800,
    living: true,
    link: "https://en.wikipedia.org/wiki/Greek_alphabet"
  },
  {
    name: "Gujarati",
    ranges: [[2689, 2692], [2693, 2702], [2703, 2706], [2707, 2729], [2730, 2737], [2738, 2740], [2741, 2746], [2748, 2758], [2759, 2762], [2763, 2766], [2768, 2769], [2784, 2788], [2790, 2802], [2809, 2816]],
    direction: "ltr",
    year: 1592,
    living: true,
    link: "https://en.wikipedia.org/wiki/Gujarati_alphabet"
  },
  {
    name: "Gurmukhi",
    ranges: [[2561, 2564], [2565, 2571], [2575, 2577], [2579, 2601], [2602, 2609], [2610, 2612], [2613, 2615], [2616, 2618], [2620, 2621], [2622, 2627], [2631, 2633], [2635, 2638], [2641, 2642], [2649, 2653], [2654, 2655], [2662, 2678]],
    direction: "ltr",
    year: 1550,
    living: true,
    link: "https://en.wikipedia.org/wiki/Gurmukh%C4%AB_alphabet"
  },
  {
    name: "Hangul",
    ranges: [[4352, 4608], [12334, 12336], [12593, 12687], [12800, 12831], [12896, 12927], [43360, 43389], [44032, 55204], [55216, 55239], [55243, 55292], [65440, 65471], [65474, 65480], [65482, 65488], [65490, 65496], [65498, 65501]],
    direction: "ltr",
    year: 1443,
    living: true,
    link: "https://en.wikipedia.org/wiki/Hangul"
  },
  {
    name: "Han",
    ranges: [[11904, 11930], [11931, 12020], [12032, 12246], [12293, 12294], [12295, 12296], [12321, 12330], [12344, 12348], [13312, 19894], [19968, 40939], [63744, 64110], [64112, 64218], [131072, 173783], [173824, 177973], [177984, 178206], [178208, 183970], [183984, 191457], [194560, 195102]],
    direction: "ltr",
    year: -1100,
    living: true,
    link: "https://en.wikipedia.org/wiki/Chinese_characters"
  },
  {
    name: "Hanunoo",
    ranges: [[5920, 5941]],
    direction: "ltr",
    year: 1300,
    living: true,
    link: "https://en.wikipedia.org/wiki/Hanun%C3%B3%27o_alphabet"
  },
  {
    name: "Hatran",
    ranges: [[67808, 67827], [67828, 67830], [67835, 67840]],
    direction: "rtl",
    year: -40,
    living: false,
    link: "https://en.wikipedia.org/wiki/Hatran_alphabet"
  },
  {
    name: "Hebrew",
    ranges: [[1425, 1480], [1488, 1515], [1520, 1525], [64285, 64311], [64312, 64317], [64318, 64319], [64320, 64322], [64323, 64325], [64326, 64336]],
    direction: "rtl",
    year: -100,
    living: true,
    link: "https://en.wikipedia.org/wiki/Hebrew_alphabet"
  },
  {
    name: "Hiragana",
    ranges: [[12353, 12439], [12445, 12448], [110593, 110879], [127488, 127489]],
    direction: "ltr",
    year: 800,
    living: true,
    link: "https://en.wikipedia.org/wiki/Hiragana"
  },
  {
    name: "Anatolian Hieroglyphs",
    ranges: [[82944, 83527]],
    direction: "ltr",
    year: -1400,
    living: false,
    link: "https://en.wikipedia.org/wiki/Anatolian_hieroglyphs"
  },
  {
    name: "Pahawh Hmong",
    ranges: [[92928, 92998], [93008, 93018], [93019, 93026], [93027, 93048], [93053, 93072]],
    direction: "ltr",
    year: 1959,
    living: true,
    link: "https://en.wikipedia.org/wiki/Pahawh_Hmong"
  },
  {
    name: "Old Hungarian",
    ranges: [[68736, 68787], [68800, 68851], [68858, 68864]],
    direction: "rtl",
    year: 1150,
    living: false,
    link: "https://en.wikipedia.org/wiki/Old_Hungarian_alphabet"
  },
  {
    name: "Old Italic",
    ranges: [[66304, 66340], [66349, 66352]],
    direction: "ltr",
    year: -750,
    living: false,
    link: "https://en.wikipedia.org/wiki/Old_Italic_script"
  },
  {
    name: "Javanese",
    ranges: [[43392, 43470], [43472, 43482], [43486, 43488]],
    direction: "ltr",
    year: 1250,
    living: true,
    link: "https://en.wikipedia.org/wiki/Javanese_script"
  },
  {
    name: "Kayah Li",
    ranges: [[43264, 43310], [43311, 43312]],
    direction: "ltr",
    year: 1962,
    living: true,
    link: "https://en.wikipedia.org/wiki/Kayah_Li_alphabet"
  },
  {
    name: "Katakana",
    ranges: [[12449, 12539], [12541, 12544], [12784, 12800], [13008, 13055], [13056, 13144], [65382, 65392], [65393, 65438], [110592, 110593]],
    direction: "ltr",
    year: 800,
    living: true,
    link: "https://en.wikipedia.org/wiki/Katakana"
  },
  {
    name: "Kharoshthi",
    ranges: [[68096, 68100], [68101, 68103], [68108, 68116], [68117, 68120], [68121, 68148], [68152, 68155], [68159, 68168], [68176, 68185]],
    direction: "rtl",
    year: -400,
    living: false,
    link: "https://en.wikipedia.org/wiki/Kharosthi"
  },
  {
    name: "Khmer",
    ranges: [[6016, 6110], [6112, 6122], [6128, 6138], [6624, 6656]],
    direction: "ltr",
    year: 611,
    living: true,
    link: "https://en.wikipedia.org/wiki/Khmer_alphabet"
  },
  {
    name: "Khojki",
    ranges: [[70144, 70162], [70163, 70207]],
    direction: "ltr",
    year: 1520,
    living: false,
    link: "https://en.wikipedia.org/wiki/Khojki_script"
  },
  {
    name: "Kannada",
    ranges: [[3200, 3204], [3205, 3213], [3214, 3217], [3218, 3241], [3242, 3252], [3253, 3258], [3260, 3269], [3270, 3273], [3274, 3278], [3285, 3287], [3294, 3295], [3296, 3300], [3302, 3312], [3313, 3315]],
    direction: "ltr",
    year: 450,
    living: true,
    link: "https://en.wikipedia.org/wiki/Kannada_alphabet"
  },
  {
    name: "Kaithi",
    ranges: [[69760, 69826]],
    direction: "ltr",
    year: 1550,
    living: false,
    link: "https://en.wikipedia.org/wiki/Kaithi"
  },
  {
    name: "Tai Tham",
    ranges: [[6688, 6751], [6752, 6781], [6783, 6794], [6800, 6810], [6816, 6830]],
    direction: "ltr",
    year: 1300,
    living: true,
    link: "https://en.wikipedia.org/wiki/Tai_Tham_alphabet"
  },
  {
    name: "Lao",
    ranges: [[3713, 3715], [3716, 3717], [3719, 3721], [3722, 3723], [3725, 3726], [3732, 3736], [3737, 3744], [3745, 3748], [3749, 3750], [3751, 3752], [3754, 3756], [3757, 3770], [3771, 3774], [3776, 3781], [3782, 3783], [3784, 3790], [3792, 3802], [3804, 3808]],
    direction: "ltr",
    year: 1350,
    living: true,
    link: "https://en.wikipedia.org/wiki/Lao_alphabet"
  },
  {
    name: "Latin",
    ranges: [[65, 91], [97, 123], [170, 171], [186, 187], [192, 215], [216, 247], [248, 697], [736, 741], [7424, 7462], [7468, 7517], [7522, 7526], [7531, 7544], [7545, 7615], [7680, 7936], [8305, 8306], [8319, 8320], [8336, 8349], [8490, 8492], [8498, 8499], [8526, 8527], [8544, 8585], [11360, 11392], [42786, 42888], [42891, 42927], [42928, 42936], [42999, 43008], [43824, 43867], [43868, 43877], [64256, 64263], [65313, 65339], [65345, 65371]],
    direction: "ltr",
    year: -700,
    living: true,
    link: "https://en.wikipedia.org/wiki/Latin_script"
  },
  {
    name: "Lepcha",
    ranges: [[7168, 7224], [7227, 7242], [7245, 7248]],
    direction: "ltr",
    year: 1700,
    living: true,
    link: "https://en.wikipedia.org/wiki/Lepcha_alphabet"
  },
  {
    name: "Limbu",
    ranges: [[6400, 6431], [6432, 6444], [6448, 6460], [6464, 6465], [6468, 6480]],
    direction: "ltr",
    year: 1740,
    living: true,
    link: "https://en.wikipedia.org/wiki/Limbu_alphabet"
  },
  {
    name: "Linear A",
    ranges: [[67072, 67383], [67392, 67414], [67424, 67432]],
    direction: "ltr",
    year: -2500,
    living: false,
    link: "https://en.wikipedia.org/wiki/Linear_A"
  },
  {
    name: "Linear B",
    ranges: [[65536, 65548], [65549, 65575], [65576, 65595], [65596, 65598], [65599, 65614], [65616, 65630], [65664, 65787]],
    direction: "ltr",
    year: -1450,
    living: false,
    link: "https://en.wikipedia.org/wiki/Linear_B"
  },
  {
    name: "Lisu",
    ranges: [[42192, 42240]],
    direction: "ltr",
    year: 1915,
    living: true,
    link: "https://en.wikipedia.org/wiki/Fraser_alphabet"
  },
  {
    name: "Lycian",
    ranges: [[66176, 66205]],
    direction: "ltr",
    year: -500,
    living: false,
    link: "https://en.wikipedia.org/wiki/Lycian_alphabet"
  },
  {
    name: "Lydian",
    ranges: [[67872, 67898], [67903, 67904]],
    direction: "rtl",
    year: -700,
    living: false,
    link: "https://en.wikipedia.org/wiki/Lydian_alphabet"
  },
  {
    name: "Mahajani",
    ranges: [[69968, 70007]],
    direction: "ltr",
    year: 1150,
    living: false,
    link: "https://en.wikipedia.org/wiki/Mahajani"
  },
  {
    name: "Mandaic",
    ranges: [[2112, 2140], [2142, 2143]],
    direction: "rtl",
    year: 200,
    living: true,
    link: "https://en.wikipedia.org/wiki/Mandaic_alphabet"
  },
  {
    name: "Manichaean",
    ranges: [[68288, 68327], [68331, 68343]],
    direction: "rtl",
    year: 250,
    living: false,
    link: "https://en.wikipedia.org/wiki/Manichaean_alphabet"
  },
  {
    name: "Marchen",
    ranges: [[72816, 72848], [72850, 72872], [72873, 72887]],
    direction: "ltr",
    year: 650,
    living: false,
    link: "https://en.wikipedia.org/wiki/Zhang-Zhung_language#Scripts"
  },
  {
    name: "Mende Kikakui",
    ranges: [[124928, 125125], [125127, 125143]],
    direction: "rtl",
    year: 1880,
    living: true,
    link: "https://en.wikipedia.org/wiki/Mende_Kikakui_script"
  },
  {
    name: "Meroitic Cursive",
    ranges: [[68000, 68024], [68028, 68048], [68050, 68096]],
    direction: "rtl",
    year: -300,
    living: false,
    link: "https://en.wikipedia.org/wiki/Meroitic_alphabet"
  },
  {
    name: "Meroitic Hieroglyphs",
    ranges: [[67968, 68000]],
    direction: "rtl",
    year: -300,
    living: false,
    link: "https://en.wikipedia.org/wiki/Meroitic_alphabet"
  },
  {
    name: "Malayalam",
    ranges: [[3328, 3332], [3333, 3341], [3342, 3345], [3346, 3397], [3398, 3401], [3402, 3408], [3412, 3428], [3430, 3456]],
    direction: "ltr",
    year: 830,
    living: true,
    link: "https://en.wikipedia.org/wiki/Malayalam_script"
  },
  {
    name: "Modi",
    ranges: [[71168, 71237], [71248, 71258]],
    direction: "ltr",
    year: 1200,
    living: false,
    link: "https://en.wikipedia.org/wiki/Modi_alphabet"
  },
  {
    name: "Mongolian",
    ranges: [[6144, 6146], [6148, 6149], [6150, 6159], [6160, 6170], [6176, 6264], [6272, 6315], [71264, 71277]],
    direction: "ttb",
    year: 1204,
    living: false,
    link: "https://en.wikipedia.org/wiki/Mongolian_script"
  },
  {
    name: "Mro",
    ranges: [[92736, 92767], [92768, 92778], [92782, 92784]],
    direction: "ltr",
    year: 1985,
    living: true,
    link: "https://en.wikipedia.org/wiki/Mru_language#Alphabet"
  },
  {
    name: "Meetei Mayek",
    ranges: [[43744, 43767], [43968, 44014], [44016, 44026]],
    direction: "ltr",
    year: 200,
    living: true,
    link: "https://en.wikipedia.org/wiki/Meitei_script"
  },
  {
    name: "Multani",
    ranges: [[70272, 70279], [70280, 70281], [70282, 70286], [70287, 70302], [70303, 70314]],
    direction: "ltr",
    year: 1750,
    living: false,
    link: "https://en.wikipedia.org/wiki/Multani_alphabet"
  },
  {
    name: "Myanmar",
    ranges: [[4096, 4256], [43488, 43519], [43616, 43648]],
    direction: "ltr",
    year: 984,
    living: true,
    link: "https://en.wikipedia.org/wiki/Burmese_alphabet"
  },
  {
    name: "Old North Arabian",
    ranges: [[68224, 68256]],
    direction: "rtl",
    year: 750,
    living: false,
    link: "https://en.wikipedia.org/wiki/Ancient_North_Arabian"
  },
  {
    name: "Nabataean",
    ranges: [[67712, 67743], [67751, 67760]],
    direction: "rtl",
    year: 150,
    living: false,
    link: "https://en.wikipedia.org/wiki/Nabataean_alphabet"
  },
  {
    name: "Newa",
    ranges: [[70656, 70746], [70747, 70748], [70749, 70750]],
    direction: "ltr",
    year: 1000,
    living: true,
    link: "https://en.wikipedia.org/wiki/Prachalit_Nepal_alphabet"
  },
  {
    name: "Nko",
    ranges: [[1984, 2043]],
    direction: "rtl",
    year: 1949,
    living: false,
    link: "https://en.wikipedia.org/wiki/N%27Ko_alphabet"
  },
  {
    name: "Nushu",
    ranges: [[94177, 94178], [110960, 111356]],
    direction: "ltr",
    year: 1500,
    living: true,
    link: "https://en.wikipedia.org/wiki/N%C3%BCshu_script"
  },
  {
    name: "Ogham",
    ranges: [[5760, 5789]],
    direction: "ltr",
    year: 350,
    living: false,
    link: "https://en.wikipedia.org/wiki/Ogham"
  },
  {
    name: "Ol Chiki",
    ranges: [[7248, 7296]],
    direction: "ltr",
    year: 1925,
    living: true,
    link: "https://en.wikipedia.org/wiki/Ol_Chiki_script"
  },
  {
    name: "Old Turkic",
    ranges: [[68608, 68681]],
    direction: "rtl",
    year: 750,
    living: false,
    link: "https://en.wikipedia.org/wiki/Old_Turkic_alphabet"
  },
  {
    name: "Oriya",
    ranges: [[2817, 2820], [2821, 2829], [2831, 2833], [2835, 2857], [2858, 2865], [2866, 2868], [2869, 2874], [2876, 2885], [2887, 2889], [2891, 2894], [2902, 2904], [2908, 2910], [2911, 2916], [2918, 2936]],
    direction: "ltr",
    year: 1060,
    living: true,
    link: "https://en.wikipedia.org/wiki/Odia_alphabet"
  },
  {
    name: "Osage",
    ranges: [[66736, 66772], [66776, 66812]],
    direction: "ltr",
    year: 2006,
    living: true,
    link: "https://en.wikipedia.org/wiki/Osage_alphabet"
  },
  {
    name: "Osmanya",
    ranges: [[66688, 66718], [66720, 66730]],
    direction: "ltr",
    year: 1920,
    living: true,
    link: "https://en.wikipedia.org/wiki/Osmanya_alphabet"
  },
  {
    name: "Palmyrene",
    ranges: [[67680, 67712]],
    direction: "rtl",
    year: -100,
    living: false,
    link: "https://en.wikipedia.org/wiki/Palmyrene_alphabet"
  },
  {
    name: "Pau Cin Hau",
    ranges: [[72384, 72441]],
    direction: "ltr",
    year: 1900,
    living: true,
    link: "https://en.wikipedia.org/wiki/Pau_Cin_Hau"
  },
  {
    name: "Old Permic",
    ranges: [[66384, 66427]],
    direction: "ltr",
    year: 1372,
    living: false,
    link: "https://en.wikipedia.org/wiki/Old_Permic_alphabet"
  },
  {
    name: "Phags-pa",
    ranges: [[43072, 43123], [43124, 43127]],
    direction: "ttb",
    year: 1269,
    living: false,
    link: "https://en.wikipedia.org/wiki/%27Phags-pa_script"
  },
  {
    name: "Inscriptional Pahlavi",
    ranges: [[68448, 68467], [68472, 68480]],
    direction: "rtl",
    year: -171,
    living: false,
    link: "https://en.wikipedia.org/wiki/Inscriptional_Pahlavi"
  },
  {
    name: "Psalter Pahlavi",
    ranges: [[68480, 68498], [68505, 68509], [68521, 68528]],
    direction: "rtl",
    year: 550,
    living: false,
    link: "https://en.wikipedia.org/wiki/Psalter_Pahlavi"
  },
  {
    name: "Phoenician",
    ranges: [[67840, 67868], [67871, 67872]],
    direction: "rtl",
    year: -1200,
    living: false,
    link: "https://en.wikipedia.org/wiki/Phoenician_alphabet"
  },
  {
    name: "Miao",
    ranges: [[93952, 94021], [94032, 94079], [94095, 94112]],
    direction: "ltr",
    year: 1936,
    living: true,
    link: "https://en.wikipedia.org/wiki/Pollard_script"
  },
  {
    name: "Inscriptional Parthian",
    ranges: [[68416, 68438], [68440, 68448]],
    direction: "rtl",
    year: -250,
    living: false,
    link: "https://en.wikipedia.org/wiki/Inscriptional_Parthian"
  },
  {
    name: "Rejang",
    ranges: [[43312, 43348], [43359, 43360]],
    direction: "ltr",
    year: 1750,
    living: true,
    link: "https://en.wikipedia.org/wiki/Rejang_script"
  },
  {
    name: "Runic",
    ranges: [[5792, 5867], [5870, 5881]],
    direction: "ltr",
    year: 150,
    living: false,
    link: "https://en.wikipedia.org/wiki/Runes"
  },
  {
    name: "Samaritan",
    ranges: [[2048, 2094], [2096, 2111]],
    direction: "rtl",
    year: -600,
    living: true,
    link: "https://en.wikipedia.org/wiki/Samaritan_alphabet"
  },
  {
    name: "Old South Arabian",
    ranges: [[68192, 68224]],
    direction: "rtl",
    year: -850,
    living: false,
    link: "https://en.wikipedia.org/wiki/Ancient_South_Arabian_script"
  },
  {
    name: "Saurashtra",
    ranges: [[43136, 43206], [43214, 43226]],
    direction: "ltr",
    year: 1920,
    living: true,
    link: "https://en.wikipedia.org/wiki/Saurashtra_alphabet"
  },
  {
    name: "SignWriting",
    ranges: [[120832, 121484], [121499, 121504], [121505, 121520]],
    direction: "ttb",
    year: 1974,
    living: true,
    link: "https://en.wikipedia.org/wiki/SignWriting"
  },
  {
    name: "Shavian",
    ranges: [[66640, 66688]],
    direction: "ltr",
    year: 1960,
    living: true,
    link: "https://en.wikipedia.org/wiki/Shavian_alphabet"
  },
  {
    name: "Sharada",
    ranges: [[70016, 70094], [70096, 70112]],
    direction: "ltr",
    year: 800,
    living: true,
    link: "https://en.wikipedia.org/wiki/%C5%9A%C4%81rad%C4%81_script"
  },
  {
    name: "Siddham",
    ranges: [[71040, 71094], [71096, 71134]],
    direction: "ltr",
    year: 550,
    living: false,
    link: "https://en.wikipedia.org/wiki/Siddha%E1%B9%83_script"
  },
  {
    name: "Khudawadi",
    ranges: [[70320, 70379], [70384, 70394]],
    direction: "ltr",
    year: 1550,
    living: true,
    link: "https://en.wikipedia.org/wiki/Khudabadi_script"
  },
  {
    name: "Sinhala",
    ranges: [[3458, 3460], [3461, 3479], [3482, 3506], [3507, 3516], [3517, 3518], [3520, 3527], [3530, 3531], [3535, 3541], [3542, 3543], [3544, 3552], [3558, 3568], [3570, 3573], [70113, 70133]],
    direction: "ltr",
    year: 700,
    living: true,
    link: "https://en.wikipedia.org/wiki/Sinhalese_alphabet"
  },
  {
    name: "Sora Sompeng",
    ranges: [[69840, 69865], [69872, 69882]],
    direction: "ltr",
    year: 1936,
    living: true,
    link: "https://en.wikipedia.org/wiki/Sorang_Sompeng_alphabet"
  },
  {
    name: "Soyombo",
    ranges: [[72272, 72324], [72326, 72349], [72350, 72355]],
    direction: "ltr",
    year: 1650,
    living: false,
    link: "https://en.wikipedia.org/wiki/Soyombo_alphabet"
  },
  {
    name: "Sundanese",
    ranges: [[7040, 7104], [7360, 7368]],
    direction: "ltr",
    year: 1350,
    living: true,
    link: "https://en.wikipedia.org/wiki/Sundanese_script"
  },
  {
    name: "Syloti Nagri",
    ranges: [[43008, 43052]],
    direction: "ltr",
    year: 1303,
    living: true,
    link: "https://en.wikipedia.org/wiki/Sylheti_Nagari"
  },
  {
    name: "Syriac",
    ranges: [[1792, 1806], [1807, 1867], [1869, 1872], [2144, 2155]],
    direction: "rtl",
    year: -200,
    living: true,
    link: "https://en.wikipedia.org/wiki/Syriac_alphabet"
  },
  {
    name: "Tagbanwa",
    ranges: [[5984, 5997], [5998, 6001], [6002, 6004]],
    direction: "ltr",
    year: 1300,
    living: true,
    link: "https://en.wikipedia.org/wiki/Tagbanwa_script"
  },
  {
    name: "Takri",
    ranges: [[71296, 71352], [71360, 71370]],
    direction: "ltr",
    year: 1550,
    living: true,
    link: "https://en.wikipedia.org/wiki/Takri_alphabet"
  },
  {
    name: "Tai Le",
    ranges: [[6480, 6510], [6512, 6517]],
    direction: "ltr",
    year: 1200,
    living: true,
    link: "https://en.wikipedia.org/wiki/Tai_Le_alphabet"
  },
  {
    name: "New Tai Lue",
    ranges: [[6528, 6572], [6576, 6602], [6608, 6619], [6622, 6624]],
    direction: "ltr",
    year: 1950,
    living: true,
    link: "https://en.wikipedia.org/wiki/New_Tai_Lue_alphabet"
  },
  {
    name: "Tamil",
    ranges: [[2946, 2948], [2949, 2955], [2958, 2961], [2962, 2966], [2969, 2971], [2972, 2973], [2974, 2976], [2979, 2981], [2984, 2987], [2990, 3002], [3006, 3011], [3014, 3017], [3018, 3022], [3024, 3025], [3031, 3032], [3046, 3067]],
    direction: "ltr",
    year: 700,
    living: true,
    link: "https://en.wikipedia.org/wiki/Tamil_script"
  },
  {
    name: "Tangut",
    ranges: [[94176, 94177], [94208, 100333], [100352, 101107]],
    direction: "ltr",
    year: 1036,
    living: false,
    link: "https://en.wikipedia.org/wiki/Tangut_script"
  },
  {
    name: "Tai Viet",
    ranges: [[43648, 43715], [43739, 43744]],
    direction: "ltr",
    year: 1200,
    living: true,
    link: "https://en.wikipedia.org/wiki/Tai_Dam_language#Writing_system"
  },
  {
    name: "Telugu",
    ranges: [[3072, 3076], [3077, 3085], [3086, 3089], [3090, 3113], [3114, 3130], [3133, 3141], [3142, 3145], [3146, 3150], [3157, 3159], [3160, 3163], [3168, 3172], [3174, 3184], [3192, 3200]],
    direction: "ltr",
    year: -900,
    living: true,
    link: "https://en.wikipedia.org/wiki/Telugu_script"
  },
  {
    name: "Tifinagh",
    ranges: [[11568, 11624], [11631, 11633], [11647, 11648]],
    direction: "ltr",
    year: -300,
    living: true,
    link: "https://en.wikipedia.org/wiki/Tifinagh"
  },
  {
    name: "Tagalog",
    ranges: [[5888, 5901], [5902, 5909]],
    direction: "ltr",
    year: 1250,
    living: true,
    link: "https://en.wikipedia.org/wiki/Baybayin"
  },
  {
    name: "Thaana",
    ranges: [[1920, 1970]],
    direction: "rtl",
    year: 1599,
    living: true,
    link: "https://en.wikipedia.org/wiki/Thaana"
  },
  {
    name: "Thai",
    ranges: [[3585, 3643], [3648, 3676]],
    direction: "ltr",
    year: 1283,
    living: true,
    link: "https://en.wikipedia.org/wiki/Thai_alphabet"
  },
  {
    name: "Tibetan",
    ranges: [[3840, 3912], [3913, 3949], [3953, 3992], [3993, 4029], [4030, 4045], [4046, 4053], [4057, 4059]],
    direction: "ltr",
    year: 650,
    living: false,
    link: "https://en.wikipedia.org/wiki/Tibetan_alphabet"
  },
  {
    name: "Tirhuta",
    ranges: [[70784, 70856], [70864, 70874]],
    direction: "ltr",
    year: 1450,
    living: true,
    link: "https://en.wikipedia.org/wiki/Tirhuta"
  },
  {
    name: "Ugaritic",
    ranges: [[66432, 66462], [66463, 66464]],
    direction: "ltr",
    year: -1400,
    living: false,
    link: "https://en.wikipedia.org/wiki/Ugaritic_alphabet"
  },
  {
    name: "Vai",
    ranges: [[42240, 42540]],
    direction: "ltr",
    year: 1830,
    living: true,
    link: "https://en.wikipedia.org/wiki/Vai_syllabary"
  },
  {
    name: "Warang Citi",
    ranges: [[71840, 71923], [71935, 71936]],
    direction: "ltr",
    year: 1946,
    living: true,
    link: "https://en.wikipedia.org/wiki/Warang_Citi"
  },
  {
    name: "Old Persian",
    ranges: [[66464, 66500], [66504, 66518]],
    direction: "ltr",
    year: -525,
    living: false,
    link: "https://en.wikipedia.org/wiki/Old_Persian_cuneiform"
  },
  {
    name: "Cuneiform",
    ranges: [[73728, 74650], [74752, 74863], [74864, 74869], [74880, 75076]],
    direction: "ltr",
    year: -3050,
    living: false,
    link: "https://en.wikipedia.org/wiki/Cuneiform_script"
  },
  {
    name: "Yi",
    ranges: [[40960, 42125], [42128, 42183]],
    direction: "ltr",
    year: 1450,
    living: true,
    link: "https://en.wikipedia.org/wiki/Yi_script"
  },
  {
    name: "Zanabazar Square",
    ranges: [[72192, 72264]],
    direction: "ltr",
    year: 1700,
    living: false,
    link: "https://en.wikipedia.org/wiki/Mongolian_writing_systems#Horizontal_square_script"
  }
];

// This makes sure the data is exported in node.js —
// `require('./path/to/scripts.js')` will get you the array.
if (typeof module != "undefined" && module.exports && (typeof window == "undefined" || window.exports != exports))
  module.exports = SCRIPTS;
if (typeof global != "undefined" && !global.SCRIPTS)
  global.SCRIPTS = SCRIPTS;

//
//
//
//
//method map
/*
function map(array, transform) {
	let mapped = [];
	for (let element of array) {
		mapped.push(transform(element));
	}
	return mapped;
}

let rtlScripts = SCRIPTS.filter(s => s.direction == "rtl");
console.log(map(rtlScripts, s => s.name));
*/
//
//
//
//
//
//method reduce
/*
function reduce(array, combine, start) {
	let current = start;
	for (let element of array) {
		current = combine(current, element);
	}
	return current;
}

console.log(reduce([1, 2, 3, 4, 5, 6], (a, b) => a + b, 0));
*/
//
//
//
//method reduce used twice
/*
function characterCount(script) {
	return script.rangees.reduce((count, [from, to]) => {
		return count + (to - from);
	}, 0);
}

console.log(SCRIPTS.reduce((a, b) => {
	return characterCount(a) < characterCount(b) ? b : a;
}));
*/
//
//
//
//
//alternative the method reduce used twice
/*
let biggest = null;
for (let script of SCRIPTS) {
	if (biggest == null ||
		characterCount(biggest) < characterCount(script)) {
		biggest = script;
	}
	}

console.log(biggest);
*/
//
//
//
//
//
//method recombination
/*
function average(array) {
	return array.reduce((a, b) => a + b) / array.length;
}

console.log(Math.round(average(SCRIPTS.filter(s => s.living).map(s => s.year
	))));//1165
console.log(Math.round(average(SCRIPTS.filter(s => !s.living).map(s => s.year
	))));//204
	*/
//
//
//
//
//
//alternative method recombination
/*
let total = 0, count = 0;
for (let script of SCRIPTS) {
	if (script.living) {
		total += script.year;
		count += 1;
	}
}

console.log(Math.round(total / count));//1165
*/
//
//
//
//function search simbol in Unicod massive
/*
function characterScript(code) {
	for (let script of SCRIPTS) {
		if (script.ranges.some(([from, to]) => {
			return code >= from && code < to;
		})) {
			return script;
		}
	}
	return null;
}

console.log(characterScript(121));

//
//
//
//the count abstraction

function countBy(items, groupName) {
	let counts = [];
	for (let item of items) {
		let name = groupName(item);
		let known = counts.findIndex(c => c.name == name);
		if (known == -1) {
			counts.push({name, count: 1});
		} else {
			counts[known].count++;
		}
	}
	return counts;
}

console.log(countBy([1, 2, 3, 4, 5, 6, 7], n => n > 2));

//
//
//
//
//
//function search text fragment in text massive
function textScripts(text) {
	let scripts = countBy(text, char => {
		let script = characterScript(char.codePointAt(0));
		return script ? script.name : "none";
	}).filter(({name}) => name != "none");

	let total = scripts.reduce((n, {count}) => n + count, 0);
	if (total == 0) return "No scripts found";

	return scripts.map(({name, count}) => {
		return '${Math.round(count * 100 / total)} % ${name}';
	}).join(", ");
}

console.log(textScripts('аппвпв "ffff", аппвп "fggf"'));
*/
//
//
//
//
//
/*
let array = [[1, 2, 3], [4, 5, 6], [ 9]];
console.log(array.reduce((flat, current) => flat.concat(current),
 []));
 */
 //
 //
 //
 //analog for
 /*
 function loop (start, test, update, body) {
 	for (let value = start; test(value); value = update(value)) {
 		body(value);
 	}
 }

 loop(3, n => n> 0, n => n - 1, console.log);
 */
 //
 //
 //
 //
 //method every
 /*
 function every(array, predicate) {
 	for (let element of array) {
 		if (predicate(element)) return false;
 	}
 	return true;
 }

 function every2(array, predicate) {
 	return !array.some(element => !predicate(element));
 }
 */
 //
 //
 //
 //
 /*
 function dominantDirectionWriting(text) {
 	let counted = countBy(text, char => {
 		let script = characterScript(char.codePointAt(0));
 		return script ? script.direction : "none";
 	}).filter(({name}) => name != "none");
 	if (counted.length == 0) return "ltr";
 	return counted.reduce((a, b) => a.count > b.count ? a : b).name;
 }

 console.log(dominantDirectionWriting("Hello world"));
 */
 //
 //



</script>

<!--<video id = "v" autoplay></video>-->
<!--<form name="login" id = "loginform">
<p>
<label>Введите адрес электронной почты:
<input type = "text" name= "yourEmail">
</label>
</p>
<p>
<label>Введите пароль:
<input type = "text" name="yourPassword">
</label>>
</p>
<button>OTnpaBиTb</button>-->
<!--<form id="myForm">
<button id="myButton" type="button">II]^KHHTe для
3arpy3KH</button>
</form>
<h1> Название книги</h1>
<div id ="booktitte"></div>
<h2>ABTopbi</h2>
<div id="book_author"></div>
<h2>Резюме</h2>
<div id="summary"></div>-->

<!--<p id="greeting"></p>-->


<!--<h1>Выполнение вычислений</h1>
<div id ="theResult"></div>-->

<!--<form id="emailinput">
<lаbеl>Введите адрес электронной почты:
<input type="text" id="yourEmail">
</lаbеl>
<input type="submit" value="npoBepnTb" id="validate">
</form>-->





<!--<form id="getText">
<p>Я задумал букву! Введите предложение, и я скажу вам,
сколько раз моя секретная буква встречается в вашем
предложении!</p>
<input type="text" name="userWords" id="userWords">
<input type="submit" name="submit">
</form>
<div id="results"></div>-->





<!--<form id="userlnput">

<textarea id="userQuestion"></textarea>

<button id="ask" type="button">nc^y4HTb OTBeT</button>
</form>
<div id="answer"/>-->
<!--
<h1 id="words">Перемещение по странице</h1>
<button type="button" id="stop">nay3a</button>
<button type="button" id="go">Пpoдoлжить</button>-->

<!--<div id="carousel"></div>-->
<!--<body onload="setFormDefaults(); ">
<form name="subscribeForm">
<h2>Подпишитесь на наш список рассылки</h2>
<label for="mce-EMAIL">Aflpec email </label>
<input type="email" value="" name="EMAIL" id="mce-
EMAIL">
<button type="button" id="btnSubscribe">Subscribe!
</button>
<button type="button" id="btnReset">Reset</button>
</form>-->
<!--<body onload="">
<form name="mathWiz">
<label>Первое число: <input type="number"
name="numberOne"></label> <br>
<label>Второе число: <input type="number"
name="numberTwo"></label><br>
<label>0ператор:
<select name="operator">
<option value="add"> + </option>
<option value="subtract"> - </option>
<option value="multiply"> * </option>
<option value="divide"> / </option>
</select>
</label>
<br>
<input type="button" name="operate" value="Bычиcлить!"><br>
<1аЬе1>Результат: <input type="number" name="theResult">
</label>
</form>-->


</body>

</html>
